/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AccessPoliciesApiService AccessPoliciesApi service
type AccessPoliciesApiService service

type ApiAccessPoliciesListRequest struct {
	ctx _context.Context
	ApiService *AccessPoliciesApiService
	customized *bool
	limit *int32
	offset *int32
	ordering *[]string
	viewsetName *string
	viewsetNameContains *string
	viewsetNameIcontains *string
	viewsetNameIn *[]string
	viewsetNameStartswith *string
	fields *string
	excludeFields *string
}

func (r ApiAccessPoliciesListRequest) Customized(customized bool) ApiAccessPoliciesListRequest {
	r.customized = &customized
	return r
}
func (r ApiAccessPoliciesListRequest) Limit(limit int32) ApiAccessPoliciesListRequest {
	r.limit = &limit
	return r
}
func (r ApiAccessPoliciesListRequest) Offset(offset int32) ApiAccessPoliciesListRequest {
	r.offset = &offset
	return r
}
func (r ApiAccessPoliciesListRequest) Ordering(ordering []string) ApiAccessPoliciesListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiAccessPoliciesListRequest) ViewsetName(viewsetName string) ApiAccessPoliciesListRequest {
	r.viewsetName = &viewsetName
	return r
}
func (r ApiAccessPoliciesListRequest) ViewsetNameContains(viewsetNameContains string) ApiAccessPoliciesListRequest {
	r.viewsetNameContains = &viewsetNameContains
	return r
}
func (r ApiAccessPoliciesListRequest) ViewsetNameIcontains(viewsetNameIcontains string) ApiAccessPoliciesListRequest {
	r.viewsetNameIcontains = &viewsetNameIcontains
	return r
}
func (r ApiAccessPoliciesListRequest) ViewsetNameIn(viewsetNameIn []string) ApiAccessPoliciesListRequest {
	r.viewsetNameIn = &viewsetNameIn
	return r
}
func (r ApiAccessPoliciesListRequest) ViewsetNameStartswith(viewsetNameStartswith string) ApiAccessPoliciesListRequest {
	r.viewsetNameStartswith = &viewsetNameStartswith
	return r
}
func (r ApiAccessPoliciesListRequest) Fields(fields string) ApiAccessPoliciesListRequest {
	r.fields = &fields
	return r
}
func (r ApiAccessPoliciesListRequest) ExcludeFields(excludeFields string) ApiAccessPoliciesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiAccessPoliciesListRequest) Execute() (PaginatedAccessPolicyResponseList, *_nethttp.Response, error) {
	return r.ApiService.AccessPoliciesListExecute(r)
}

/*
 * AccessPoliciesList List access policys
 * ViewSet for AccessPolicy.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAccessPoliciesListRequest
 */
func (a *AccessPoliciesApiService) AccessPoliciesList(ctx _context.Context) ApiAccessPoliciesListRequest {
	return ApiAccessPoliciesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedAccessPolicyResponseList
 */
func (a *AccessPoliciesApiService) AccessPoliciesListExecute(r ApiAccessPoliciesListRequest) (PaginatedAccessPolicyResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedAccessPolicyResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessPoliciesApiService.AccessPoliciesList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/access_policies/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.customized != nil {
		localVarQueryParams.Add("customized", parameterToString(*r.customized, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.viewsetName != nil {
		localVarQueryParams.Add("viewset_name", parameterToString(*r.viewsetName, ""))
	}
	if r.viewsetNameContains != nil {
		localVarQueryParams.Add("viewset_name__contains", parameterToString(*r.viewsetNameContains, ""))
	}
	if r.viewsetNameIcontains != nil {
		localVarQueryParams.Add("viewset_name__icontains", parameterToString(*r.viewsetNameIcontains, ""))
	}
	if r.viewsetNameIn != nil {
		localVarQueryParams.Add("viewset_name__in", parameterToString(*r.viewsetNameIn, "csv"))
	}
	if r.viewsetNameStartswith != nil {
		localVarQueryParams.Add("viewset_name__startswith", parameterToString(*r.viewsetNameStartswith, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessPoliciesPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *AccessPoliciesApiService
	pulpId string
	patchedAccessPolicy *PatchedAccessPolicy
}

func (r ApiAccessPoliciesPartialUpdateRequest) PatchedAccessPolicy(patchedAccessPolicy PatchedAccessPolicy) ApiAccessPoliciesPartialUpdateRequest {
	r.patchedAccessPolicy = &patchedAccessPolicy
	return r
}

func (r ApiAccessPoliciesPartialUpdateRequest) Execute() (AccessPolicyResponse, *_nethttp.Response, error) {
	return r.ApiService.AccessPoliciesPartialUpdateExecute(r)
}

/*
 * AccessPoliciesPartialUpdate Update an access policy
 * ViewSet for AccessPolicy.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this access policy.
 * @return ApiAccessPoliciesPartialUpdateRequest
 */
func (a *AccessPoliciesApiService) AccessPoliciesPartialUpdate(ctx _context.Context, pulpId string) ApiAccessPoliciesPartialUpdateRequest {
	return ApiAccessPoliciesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return AccessPolicyResponse
 */
func (a *AccessPoliciesApiService) AccessPoliciesPartialUpdateExecute(r ApiAccessPoliciesPartialUpdateRequest) (AccessPolicyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccessPolicyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessPoliciesApiService.AccessPoliciesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/access_policies/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchedAccessPolicy == nil {
		return localVarReturnValue, nil, reportError("patchedAccessPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedAccessPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessPoliciesReadRequest struct {
	ctx _context.Context
	ApiService *AccessPoliciesApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiAccessPoliciesReadRequest) Fields(fields string) ApiAccessPoliciesReadRequest {
	r.fields = &fields
	return r
}
func (r ApiAccessPoliciesReadRequest) ExcludeFields(excludeFields string) ApiAccessPoliciesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiAccessPoliciesReadRequest) Execute() (AccessPolicyResponse, *_nethttp.Response, error) {
	return r.ApiService.AccessPoliciesReadExecute(r)
}

/*
 * AccessPoliciesRead Inspect an access policy
 * ViewSet for AccessPolicy.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this access policy.
 * @return ApiAccessPoliciesReadRequest
 */
func (a *AccessPoliciesApiService) AccessPoliciesRead(ctx _context.Context, pulpId string) ApiAccessPoliciesReadRequest {
	return ApiAccessPoliciesReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return AccessPolicyResponse
 */
func (a *AccessPoliciesApiService) AccessPoliciesReadExecute(r ApiAccessPoliciesReadRequest) (AccessPolicyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccessPolicyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessPoliciesApiService.AccessPoliciesRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/access_policies/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessPoliciesResetRequest struct {
	ctx _context.Context
	ApiService *AccessPoliciesApiService
	pulpId string
}


func (r ApiAccessPoliciesResetRequest) Execute() (AccessPolicyResponse, *_nethttp.Response, error) {
	return r.ApiService.AccessPoliciesResetExecute(r)
}

/*
 * AccessPoliciesReset Method for AccessPoliciesReset
 * Reset the access policy to its uncustomized default value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this access policy.
 * @return ApiAccessPoliciesResetRequest
 */
func (a *AccessPoliciesApiService) AccessPoliciesReset(ctx _context.Context, pulpId string) ApiAccessPoliciesResetRequest {
	return ApiAccessPoliciesResetRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return AccessPolicyResponse
 */
func (a *AccessPoliciesApiService) AccessPoliciesResetExecute(r ApiAccessPoliciesResetRequest) (AccessPolicyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccessPolicyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessPoliciesApiService.AccessPoliciesReset")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/access_policies/{pulp_id}/reset/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessPoliciesUpdateRequest struct {
	ctx _context.Context
	ApiService *AccessPoliciesApiService
	pulpId string
	accessPolicy *AccessPolicy
}

func (r ApiAccessPoliciesUpdateRequest) AccessPolicy(accessPolicy AccessPolicy) ApiAccessPoliciesUpdateRequest {
	r.accessPolicy = &accessPolicy
	return r
}

func (r ApiAccessPoliciesUpdateRequest) Execute() (AccessPolicyResponse, *_nethttp.Response, error) {
	return r.ApiService.AccessPoliciesUpdateExecute(r)
}

/*
 * AccessPoliciesUpdate Update an access policy
 * ViewSet for AccessPolicy.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this access policy.
 * @return ApiAccessPoliciesUpdateRequest
 */
func (a *AccessPoliciesApiService) AccessPoliciesUpdate(ctx _context.Context, pulpId string) ApiAccessPoliciesUpdateRequest {
	return ApiAccessPoliciesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return AccessPolicyResponse
 */
func (a *AccessPoliciesApiService) AccessPoliciesUpdateExecute(r ApiAccessPoliciesUpdateRequest) (AccessPolicyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccessPolicyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessPoliciesApiService.AccessPoliciesUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/access_policies/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.accessPolicy == nil {
		return localVarReturnValue, nil, reportError("accessPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
