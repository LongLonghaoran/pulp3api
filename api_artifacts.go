/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// ArtifactsApiService ArtifactsApi service
type ArtifactsApiService service

type ApiArtifactsCreateRequest struct {
	ctx _context.Context
	ApiService *ArtifactsApiService
	file **os.File
	size *int32
	md5 *string
	sha1 *string
	sha224 *string
	sha256 *string
	sha384 *string
	sha512 *string
}

func (r ApiArtifactsCreateRequest) File(file *os.File) ApiArtifactsCreateRequest {
	r.file = &file
	return r
}
func (r ApiArtifactsCreateRequest) Size(size int32) ApiArtifactsCreateRequest {
	r.size = &size
	return r
}
func (r ApiArtifactsCreateRequest) Md5(md5 string) ApiArtifactsCreateRequest {
	r.md5 = &md5
	return r
}
func (r ApiArtifactsCreateRequest) Sha1(sha1 string) ApiArtifactsCreateRequest {
	r.sha1 = &sha1
	return r
}
func (r ApiArtifactsCreateRequest) Sha224(sha224 string) ApiArtifactsCreateRequest {
	r.sha224 = &sha224
	return r
}
func (r ApiArtifactsCreateRequest) Sha256(sha256 string) ApiArtifactsCreateRequest {
	r.sha256 = &sha256
	return r
}
func (r ApiArtifactsCreateRequest) Sha384(sha384 string) ApiArtifactsCreateRequest {
	r.sha384 = &sha384
	return r
}
func (r ApiArtifactsCreateRequest) Sha512(sha512 string) ApiArtifactsCreateRequest {
	r.sha512 = &sha512
	return r
}

func (r ApiArtifactsCreateRequest) Execute() (ArtifactResponse, *_nethttp.Response, error) {
	return r.ApiService.ArtifactsCreateExecute(r)
}

/*
 * ArtifactsCreate Create an artifact
 * A customized named ModelViewSet that knows how to register itself with the Pulp API router.

This viewset is discoverable by its name.
"Normal" Django Models and Master/Detail models are supported by the ``register_with`` method.

Attributes:
    lookup_field (str): The name of the field by which an object should be looked up, in
        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'
    endpoint_name (str): The name of the final path segment that should identify the ViewSet's
        collection endpoint.
    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must
        correspond to the "parent_prefix" of a router with rest_framework_nested.NestedMixin.
        None indicates this ViewSet should not be nested.
    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs
        to django model filter expressions that can be used with the corresponding value from
        self.kwargs, used only by a nested ViewSet to filter based on the parent object's
        identity.
    schema (DefaultSchema): The schema class to use by default in a viewset.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiArtifactsCreateRequest
 */
func (a *ArtifactsApiService) ArtifactsCreate(ctx _context.Context) ApiArtifactsCreateRequest {
	return ApiArtifactsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ArtifactResponse
 */
func (a *ArtifactsApiService) ArtifactsCreateExecute(r ApiArtifactsCreateRequest) (ArtifactResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtifactResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactsApiService.ArtifactsCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/artifacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormFileName = "file"
	localVarFile := *r.file
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if r.size != nil {
		localVarFormParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.md5 != nil {
		localVarFormParams.Add("md5", parameterToString(*r.md5, ""))
	}
	if r.sha1 != nil {
		localVarFormParams.Add("sha1", parameterToString(*r.sha1, ""))
	}
	if r.sha224 != nil {
		localVarFormParams.Add("sha224", parameterToString(*r.sha224, ""))
	}
	if r.sha256 != nil {
		localVarFormParams.Add("sha256", parameterToString(*r.sha256, ""))
	}
	if r.sha384 != nil {
		localVarFormParams.Add("sha384", parameterToString(*r.sha384, ""))
	}
	if r.sha512 != nil {
		localVarFormParams.Add("sha512", parameterToString(*r.sha512, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiArtifactsDeleteRequest struct {
	ctx _context.Context
	ApiService *ArtifactsApiService
	pulpId string
}


func (r ApiArtifactsDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ArtifactsDeleteExecute(r)
}

/*
 * ArtifactsDelete Delete an artifact
 * Remove Artifact only if it is not associated with any Content.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this artifact.
 * @return ApiArtifactsDeleteRequest
 */
func (a *ArtifactsApiService) ArtifactsDelete(ctx _context.Context, pulpId string) ApiArtifactsDeleteRequest {
	return ApiArtifactsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 */
func (a *ArtifactsApiService) ArtifactsDeleteExecute(r ApiArtifactsDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactsApiService.ArtifactsDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/artifacts/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiArtifactsListRequest struct {
	ctx _context.Context
	ApiService *ArtifactsApiService
	limit *int32
	md5 *string
	offset *int32
	ordering *[]string
	repositoryVersion *string
	sha1 *string
	sha224 *string
	sha256 *string
	sha384 *string
	sha512 *string
	fields *string
	excludeFields *string
}

func (r ApiArtifactsListRequest) Limit(limit int32) ApiArtifactsListRequest {
	r.limit = &limit
	return r
}
func (r ApiArtifactsListRequest) Md5(md5 string) ApiArtifactsListRequest {
	r.md5 = &md5
	return r
}
func (r ApiArtifactsListRequest) Offset(offset int32) ApiArtifactsListRequest {
	r.offset = &offset
	return r
}
func (r ApiArtifactsListRequest) Ordering(ordering []string) ApiArtifactsListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiArtifactsListRequest) RepositoryVersion(repositoryVersion string) ApiArtifactsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}
func (r ApiArtifactsListRequest) Sha1(sha1 string) ApiArtifactsListRequest {
	r.sha1 = &sha1
	return r
}
func (r ApiArtifactsListRequest) Sha224(sha224 string) ApiArtifactsListRequest {
	r.sha224 = &sha224
	return r
}
func (r ApiArtifactsListRequest) Sha256(sha256 string) ApiArtifactsListRequest {
	r.sha256 = &sha256
	return r
}
func (r ApiArtifactsListRequest) Sha384(sha384 string) ApiArtifactsListRequest {
	r.sha384 = &sha384
	return r
}
func (r ApiArtifactsListRequest) Sha512(sha512 string) ApiArtifactsListRequest {
	r.sha512 = &sha512
	return r
}
func (r ApiArtifactsListRequest) Fields(fields string) ApiArtifactsListRequest {
	r.fields = &fields
	return r
}
func (r ApiArtifactsListRequest) ExcludeFields(excludeFields string) ApiArtifactsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiArtifactsListRequest) Execute() (PaginatedArtifactResponseList, *_nethttp.Response, error) {
	return r.ApiService.ArtifactsListExecute(r)
}

/*
 * ArtifactsList List artifacts
 * A customized named ModelViewSet that knows how to register itself with the Pulp API router.

This viewset is discoverable by its name.
"Normal" Django Models and Master/Detail models are supported by the ``register_with`` method.

Attributes:
    lookup_field (str): The name of the field by which an object should be looked up, in
        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'
    endpoint_name (str): The name of the final path segment that should identify the ViewSet's
        collection endpoint.
    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must
        correspond to the "parent_prefix" of a router with rest_framework_nested.NestedMixin.
        None indicates this ViewSet should not be nested.
    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs
        to django model filter expressions that can be used with the corresponding value from
        self.kwargs, used only by a nested ViewSet to filter based on the parent object's
        identity.
    schema (DefaultSchema): The schema class to use by default in a viewset.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiArtifactsListRequest
 */
func (a *ArtifactsApiService) ArtifactsList(ctx _context.Context) ApiArtifactsListRequest {
	return ApiArtifactsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedArtifactResponseList
 */
func (a *ArtifactsApiService) ArtifactsListExecute(r ApiArtifactsListRequest) (PaginatedArtifactResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedArtifactResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactsApiService.ArtifactsList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/artifacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.md5 != nil {
		localVarQueryParams.Add("md5", parameterToString(*r.md5, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.repositoryVersion != nil {
		localVarQueryParams.Add("repository_version", parameterToString(*r.repositoryVersion, ""))
	}
	if r.sha1 != nil {
		localVarQueryParams.Add("sha1", parameterToString(*r.sha1, ""))
	}
	if r.sha224 != nil {
		localVarQueryParams.Add("sha224", parameterToString(*r.sha224, ""))
	}
	if r.sha256 != nil {
		localVarQueryParams.Add("sha256", parameterToString(*r.sha256, ""))
	}
	if r.sha384 != nil {
		localVarQueryParams.Add("sha384", parameterToString(*r.sha384, ""))
	}
	if r.sha512 != nil {
		localVarQueryParams.Add("sha512", parameterToString(*r.sha512, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiArtifactsReadRequest struct {
	ctx _context.Context
	ApiService *ArtifactsApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiArtifactsReadRequest) Fields(fields string) ApiArtifactsReadRequest {
	r.fields = &fields
	return r
}
func (r ApiArtifactsReadRequest) ExcludeFields(excludeFields string) ApiArtifactsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiArtifactsReadRequest) Execute() (ArtifactResponse, *_nethttp.Response, error) {
	return r.ApiService.ArtifactsReadExecute(r)
}

/*
 * ArtifactsRead Inspect an artifact
 * A customized named ModelViewSet that knows how to register itself with the Pulp API router.

This viewset is discoverable by its name.
"Normal" Django Models and Master/Detail models are supported by the ``register_with`` method.

Attributes:
    lookup_field (str): The name of the field by which an object should be looked up, in
        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'
    endpoint_name (str): The name of the final path segment that should identify the ViewSet's
        collection endpoint.
    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must
        correspond to the "parent_prefix" of a router with rest_framework_nested.NestedMixin.
        None indicates this ViewSet should not be nested.
    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs
        to django model filter expressions that can be used with the corresponding value from
        self.kwargs, used only by a nested ViewSet to filter based on the parent object's
        identity.
    schema (DefaultSchema): The schema class to use by default in a viewset.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this artifact.
 * @return ApiArtifactsReadRequest
 */
func (a *ArtifactsApiService) ArtifactsRead(ctx _context.Context, pulpId string) ApiArtifactsReadRequest {
	return ApiArtifactsReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return ArtifactResponse
 */
func (a *ArtifactsApiService) ArtifactsReadExecute(r ApiArtifactsReadRequest) (ArtifactResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtifactResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactsApiService.ArtifactsRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/artifacts/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
