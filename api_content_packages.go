/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// ContentPackagesApiService ContentPackagesApi service
type ContentPackagesApiService service

type ApiContentDebPackagesCreateRequest struct {
	ctx context.Context
	ApiService *ContentPackagesApiService
	artifact *string
	relativePath *string
	file **os.File
	repository *string
	upload *string
}

// Artifact file representing the physical content
func (r ApiContentDebPackagesCreateRequest) Artifact(artifact string) ApiContentDebPackagesCreateRequest {
	r.artifact = &artifact
	return r
}

// Path where the artifact is located relative to distributions base_path
func (r ApiContentDebPackagesCreateRequest) RelativePath(relativePath string) ApiContentDebPackagesCreateRequest {
	r.relativePath = &relativePath
	return r
}

// An uploaded file that may be turned into the artifact of the content unit.
func (r ApiContentDebPackagesCreateRequest) File(file *os.File) ApiContentDebPackagesCreateRequest {
	r.file = &file
	return r
}

// A URI of a repository the new content unit should be associated with.
func (r ApiContentDebPackagesCreateRequest) Repository(repository string) ApiContentDebPackagesCreateRequest {
	r.repository = &repository
	return r
}

// An uncommitted upload that may be turned into the artifact of the content unit.
func (r ApiContentDebPackagesCreateRequest) Upload(upload string) ApiContentDebPackagesCreateRequest {
	r.upload = &upload
	return r
}

func (r ApiContentDebPackagesCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.ContentDebPackagesCreateExecute(r)
}

/*
ContentDebPackagesCreate Create a package

Trigger an asynchronous task to create content,optionally create new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContentDebPackagesCreateRequest
*/
func (a *ContentPackagesApiService) ContentDebPackagesCreate(ctx context.Context) ApiContentDebPackagesCreateRequest {
	return ApiContentDebPackagesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *ContentPackagesApiService) ContentDebPackagesCreateExecute(r ApiContentDebPackagesCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesApiService.ContentDebPackagesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/packages/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.artifact != nil {
		localVarFormParams.Add("artifact", parameterToString(*r.artifact, ""))
	}
	if r.relativePath != nil {
		localVarFormParams.Add("relative_path", parameterToString(*r.relativePath, ""))
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"

	var fileLocalVarFile *os.File
	if r.file != nil {
		fileLocalVarFile = *r.file
	}
	if fileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileLocalVarFile)
		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	if r.repository != nil {
		localVarFormParams.Add("repository", parameterToString(*r.repository, ""))
	}
	if r.upload != nil {
		localVarFormParams.Add("upload", parameterToString(*r.upload, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentDebPackagesListRequest struct {
	ctx context.Context
	ApiService *ContentPackagesApiService
	architecture *string
	autoBuiltPackage *string
	buildEssential *bool
	builtUsing *string
	essential *bool
	installedSize *int32
	limit *int32
	maintainer *string
	multiArch *string
	offset *int32
	ordering *[]string
	origin *string
	originalMaintainer *string
	package_ *string
	priority *string
	relativePath *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	section *string
	sha256 *string
	source *string
	tag *string
	version *string
	fields *string
	excludeFields *string
}

// Filter results where architecture matches value
func (r ApiContentDebPackagesListRequest) Architecture(architecture string) ApiContentDebPackagesListRequest {
	r.architecture = &architecture
	return r
}

// Filter results where auto_built_package matches value
func (r ApiContentDebPackagesListRequest) AutoBuiltPackage(autoBuiltPackage string) ApiContentDebPackagesListRequest {
	r.autoBuiltPackage = &autoBuiltPackage
	return r
}

// Filter results where build_essential matches value
func (r ApiContentDebPackagesListRequest) BuildEssential(buildEssential bool) ApiContentDebPackagesListRequest {
	r.buildEssential = &buildEssential
	return r
}

// Filter results where built_using matches value
func (r ApiContentDebPackagesListRequest) BuiltUsing(builtUsing string) ApiContentDebPackagesListRequest {
	r.builtUsing = &builtUsing
	return r
}

// Filter results where essential matches value
func (r ApiContentDebPackagesListRequest) Essential(essential bool) ApiContentDebPackagesListRequest {
	r.essential = &essential
	return r
}

// Filter results where installed_size matches value
func (r ApiContentDebPackagesListRequest) InstalledSize(installedSize int32) ApiContentDebPackagesListRequest {
	r.installedSize = &installedSize
	return r
}

// Number of results to return per page.
func (r ApiContentDebPackagesListRequest) Limit(limit int32) ApiContentDebPackagesListRequest {
	r.limit = &limit
	return r
}

// Filter results where maintainer matches value
func (r ApiContentDebPackagesListRequest) Maintainer(maintainer string) ApiContentDebPackagesListRequest {
	r.maintainer = &maintainer
	return r
}

// Filter results where multi_arch matches value
func (r ApiContentDebPackagesListRequest) MultiArch(multiArch string) ApiContentDebPackagesListRequest {
	r.multiArch = &multiArch
	return r
}

// The initial index from which to return the results.
func (r ApiContentDebPackagesListRequest) Offset(offset int32) ApiContentDebPackagesListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ApiContentDebPackagesListRequest) Ordering(ordering []string) ApiContentDebPackagesListRequest {
	r.ordering = &ordering
	return r
}

// Filter results where origin matches value
func (r ApiContentDebPackagesListRequest) Origin(origin string) ApiContentDebPackagesListRequest {
	r.origin = &origin
	return r
}

// Filter results where original_maintainer matches value
func (r ApiContentDebPackagesListRequest) OriginalMaintainer(originalMaintainer string) ApiContentDebPackagesListRequest {
	r.originalMaintainer = &originalMaintainer
	return r
}

// Filter results where package matches value
func (r ApiContentDebPackagesListRequest) Package_(package_ string) ApiContentDebPackagesListRequest {
	r.package_ = &package_
	return r
}

// Filter results where priority matches value
func (r ApiContentDebPackagesListRequest) Priority(priority string) ApiContentDebPackagesListRequest {
	r.priority = &priority
	return r
}

// Filter results where relative_path matches value
func (r ApiContentDebPackagesListRequest) RelativePath(relativePath string) ApiContentDebPackagesListRequest {
	r.relativePath = &relativePath
	return r
}

// Repository Version referenced by HREF
func (r ApiContentDebPackagesListRequest) RepositoryVersion(repositoryVersion string) ApiContentDebPackagesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ApiContentDebPackagesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ApiContentDebPackagesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ApiContentDebPackagesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ApiContentDebPackagesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// Filter results where section matches value
func (r ApiContentDebPackagesListRequest) Section(section string) ApiContentDebPackagesListRequest {
	r.section = &section
	return r
}

// Filter results where sha256 matches value
func (r ApiContentDebPackagesListRequest) Sha256(sha256 string) ApiContentDebPackagesListRequest {
	r.sha256 = &sha256
	return r
}

// Filter results where source matches value
func (r ApiContentDebPackagesListRequest) Source(source string) ApiContentDebPackagesListRequest {
	r.source = &source
	return r
}

// Filter results where tag matches value
func (r ApiContentDebPackagesListRequest) Tag(tag string) ApiContentDebPackagesListRequest {
	r.tag = &tag
	return r
}

// Filter results where version matches value
func (r ApiContentDebPackagesListRequest) Version(version string) ApiContentDebPackagesListRequest {
	r.version = &version
	return r
}

// A list of fields to include in the response.
func (r ApiContentDebPackagesListRequest) Fields(fields string) ApiContentDebPackagesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiContentDebPackagesListRequest) ExcludeFields(excludeFields string) ApiContentDebPackagesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentDebPackagesListRequest) Execute() (*PaginateddebBasePackageResponseList, *http.Response, error) {
	return r.ApiService.ContentDebPackagesListExecute(r)
}

/*
ContentDebPackagesList List packages

A Package represents a '.deb' binary package.

Associated artifacts: Exactly one '.deb' package file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContentDebPackagesListRequest
*/
func (a *ContentPackagesApiService) ContentDebPackagesList(ctx context.Context) ApiContentDebPackagesListRequest {
	return ApiContentDebPackagesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginateddebBasePackageResponseList
func (a *ContentPackagesApiService) ContentDebPackagesListExecute(r ApiContentDebPackagesListRequest) (*PaginateddebBasePackageResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginateddebBasePackageResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesApiService.ContentDebPackagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/packages/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.architecture != nil {
		localVarQueryParams.Add("architecture", parameterToString(*r.architecture, ""))
	}
	if r.autoBuiltPackage != nil {
		localVarQueryParams.Add("auto_built_package", parameterToString(*r.autoBuiltPackage, ""))
	}
	if r.buildEssential != nil {
		localVarQueryParams.Add("build_essential", parameterToString(*r.buildEssential, ""))
	}
	if r.builtUsing != nil {
		localVarQueryParams.Add("built_using", parameterToString(*r.builtUsing, ""))
	}
	if r.essential != nil {
		localVarQueryParams.Add("essential", parameterToString(*r.essential, ""))
	}
	if r.installedSize != nil {
		localVarQueryParams.Add("installed_size", parameterToString(*r.installedSize, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.maintainer != nil {
		localVarQueryParams.Add("maintainer", parameterToString(*r.maintainer, ""))
	}
	if r.multiArch != nil {
		localVarQueryParams.Add("multi_arch", parameterToString(*r.multiArch, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.origin != nil {
		localVarQueryParams.Add("origin", parameterToString(*r.origin, ""))
	}
	if r.originalMaintainer != nil {
		localVarQueryParams.Add("original_maintainer", parameterToString(*r.originalMaintainer, ""))
	}
	if r.package_ != nil {
		localVarQueryParams.Add("package", parameterToString(*r.package_, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.relativePath != nil {
		localVarQueryParams.Add("relative_path", parameterToString(*r.relativePath, ""))
	}
	if r.repositoryVersion != nil {
		localVarQueryParams.Add("repository_version", parameterToString(*r.repositoryVersion, ""))
	}
	if r.repositoryVersionAdded != nil {
		localVarQueryParams.Add("repository_version_added", parameterToString(*r.repositoryVersionAdded, ""))
	}
	if r.repositoryVersionRemoved != nil {
		localVarQueryParams.Add("repository_version_removed", parameterToString(*r.repositoryVersionRemoved, ""))
	}
	if r.section != nil {
		localVarQueryParams.Add("section", parameterToString(*r.section, ""))
	}
	if r.sha256 != nil {
		localVarQueryParams.Add("sha256", parameterToString(*r.sha256, ""))
	}
	if r.source != nil {
		localVarQueryParams.Add("source", parameterToString(*r.source, ""))
	}
	if r.tag != nil {
		localVarQueryParams.Add("tag", parameterToString(*r.tag, ""))
	}
	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentDebPackagesReadRequest struct {
	ctx context.Context
	ApiService *ContentPackagesApiService
	pulpId string
	fields *string
	excludeFields *string
}

// A list of fields to include in the response.
func (r ApiContentDebPackagesReadRequest) Fields(fields string) ApiContentDebPackagesReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiContentDebPackagesReadRequest) ExcludeFields(excludeFields string) ApiContentDebPackagesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentDebPackagesReadRequest) Execute() (*DebBasePackageResponse, *http.Response, error) {
	return r.ApiService.ContentDebPackagesReadExecute(r)
}

/*
ContentDebPackagesRead Inspect a package

A Package represents a '.deb' binary package.

Associated artifacts: Exactly one '.deb' package file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpId A UUID string identifying this package.
 @return ApiContentDebPackagesReadRequest
*/
func (a *ContentPackagesApiService) ContentDebPackagesRead(ctx context.Context, pulpId string) ApiContentDebPackagesReadRequest {
	return ApiContentDebPackagesReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

// Execute executes the request
//  @return DebBasePackageResponse
func (a *ContentPackagesApiService) ContentDebPackagesReadExecute(r ApiContentDebPackagesReadRequest) (*DebBasePackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebBasePackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesApiService.ContentDebPackagesRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/packages/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", url.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
