/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ContentReleaseComponentsApiService ContentReleaseComponentsApi service
type ContentReleaseComponentsApiService service

type ApiContentDebReleaseComponentsCreateRequest struct {
	ctx context.Context
	ApiService *ContentReleaseComponentsApiService
	debReleaseComponent *DebReleaseComponent
}

func (r ApiContentDebReleaseComponentsCreateRequest) DebReleaseComponent(debReleaseComponent DebReleaseComponent) ApiContentDebReleaseComponentsCreateRequest {
	r.debReleaseComponent = &debReleaseComponent
	return r
}

func (r ApiContentDebReleaseComponentsCreateRequest) Execute() (*DebReleaseComponentResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleaseComponentsCreateExecute(r)
}

/*
ContentDebReleaseComponentsCreate Create a release component

A ReleaseComponent represents a single APT repository component.

Associated artifacts: None; contains only metadata.

Every ReleaseComponent is always associated with exactly one Release. This indicates that the
release/distribution in question contains this component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContentDebReleaseComponentsCreateRequest
*/
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsCreate(ctx context.Context) ApiContentDebReleaseComponentsCreateRequest {
	return ApiContentDebReleaseComponentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DebReleaseComponentResponse
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsCreateExecute(r ApiContentDebReleaseComponentsCreateRequest) (*DebReleaseComponentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseComponentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseComponentsApiService.ContentDebReleaseComponentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_components/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.debReleaseComponent == nil {
		return localVarReturnValue, nil, reportError("debReleaseComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.debReleaseComponent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentDebReleaseComponentsListRequest struct {
	ctx context.Context
	ApiService *ContentReleaseComponentsApiService
	component *string
	limit *int32
	offset *int32
	ordering *[]string
	release *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *string
	excludeFields *string
}

// Filter results where component matches value
func (r ApiContentDebReleaseComponentsListRequest) Component(component string) ApiContentDebReleaseComponentsListRequest {
	r.component = &component
	return r
}

// Number of results to return per page.
func (r ApiContentDebReleaseComponentsListRequest) Limit(limit int32) ApiContentDebReleaseComponentsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiContentDebReleaseComponentsListRequest) Offset(offset int32) ApiContentDebReleaseComponentsListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ApiContentDebReleaseComponentsListRequest) Ordering(ordering []string) ApiContentDebReleaseComponentsListRequest {
	r.ordering = &ordering
	return r
}

// Filter results where release matches value
func (r ApiContentDebReleaseComponentsListRequest) Release(release string) ApiContentDebReleaseComponentsListRequest {
	r.release = &release
	return r
}

// Repository Version referenced by HREF
func (r ApiContentDebReleaseComponentsListRequest) RepositoryVersion(repositoryVersion string) ApiContentDebReleaseComponentsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ApiContentDebReleaseComponentsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ApiContentDebReleaseComponentsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ApiContentDebReleaseComponentsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ApiContentDebReleaseComponentsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ApiContentDebReleaseComponentsListRequest) Fields(fields string) ApiContentDebReleaseComponentsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiContentDebReleaseComponentsListRequest) ExcludeFields(excludeFields string) ApiContentDebReleaseComponentsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentDebReleaseComponentsListRequest) Execute() (*PaginateddebReleaseComponentResponseList, *http.Response, error) {
	return r.ApiService.ContentDebReleaseComponentsListExecute(r)
}

/*
ContentDebReleaseComponentsList List release components

A ReleaseComponent represents a single APT repository component.

Associated artifacts: None; contains only metadata.

Every ReleaseComponent is always associated with exactly one Release. This indicates that the
release/distribution in question contains this component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContentDebReleaseComponentsListRequest
*/
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsList(ctx context.Context) ApiContentDebReleaseComponentsListRequest {
	return ApiContentDebReleaseComponentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginateddebReleaseComponentResponseList
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsListExecute(r ApiContentDebReleaseComponentsListRequest) (*PaginateddebReleaseComponentResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginateddebReleaseComponentResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseComponentsApiService.ContentDebReleaseComponentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_components/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.component != nil {
		localVarQueryParams.Add("component", parameterToString(*r.component, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.release != nil {
		localVarQueryParams.Add("release", parameterToString(*r.release, ""))
	}
	if r.repositoryVersion != nil {
		localVarQueryParams.Add("repository_version", parameterToString(*r.repositoryVersion, ""))
	}
	if r.repositoryVersionAdded != nil {
		localVarQueryParams.Add("repository_version_added", parameterToString(*r.repositoryVersionAdded, ""))
	}
	if r.repositoryVersionRemoved != nil {
		localVarQueryParams.Add("repository_version_removed", parameterToString(*r.repositoryVersionRemoved, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentDebReleaseComponentsReadRequest struct {
	ctx context.Context
	ApiService *ContentReleaseComponentsApiService
	pulpId string
	fields *string
	excludeFields *string
}

// A list of fields to include in the response.
func (r ApiContentDebReleaseComponentsReadRequest) Fields(fields string) ApiContentDebReleaseComponentsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiContentDebReleaseComponentsReadRequest) ExcludeFields(excludeFields string) ApiContentDebReleaseComponentsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentDebReleaseComponentsReadRequest) Execute() (*DebReleaseComponentResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleaseComponentsReadExecute(r)
}

/*
ContentDebReleaseComponentsRead Inspect a release component

A ReleaseComponent represents a single APT repository component.

Associated artifacts: None; contains only metadata.

Every ReleaseComponent is always associated with exactly one Release. This indicates that the
release/distribution in question contains this component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpId A UUID string identifying this release component.
 @return ApiContentDebReleaseComponentsReadRequest
*/
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsRead(ctx context.Context, pulpId string) ApiContentDebReleaseComponentsReadRequest {
	return ApiContentDebReleaseComponentsReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

// Execute executes the request
//  @return DebReleaseComponentResponse
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsReadExecute(r ApiContentDebReleaseComponentsReadRequest) (*DebReleaseComponentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseComponentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseComponentsApiService.ContentDebReleaseComponentsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_components/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", url.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
