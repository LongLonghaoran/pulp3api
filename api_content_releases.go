/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ContentReleasesApiService ContentReleasesApi service
type ContentReleasesApiService service

type ApiContentDebReleasesCreateRequest struct {
	ctx _context.Context
	ApiService *ContentReleasesApiService
	debRelease *DebRelease
}

func (r ApiContentDebReleasesCreateRequest) DebRelease(debRelease DebRelease) ApiContentDebReleasesCreateRequest {
	r.debRelease = &debRelease
	return r
}

func (r ApiContentDebReleasesCreateRequest) Execute() (DebReleaseResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentDebReleasesCreateExecute(r)
}

/*
 * ContentDebReleasesCreate Create a release
 * A Release represents a single APT release/distribution.

Associated artifacts: None; contains only metadata.

Note that in the context of the "Release content", the terms "distribution" and "release"
are synonyms. An "APT repository release/distribution" is associated with a single 'Release'
file below the 'dists/' folder. The "distribution" refers to the path between 'dists/' and the
'Release' file. The "distribution" could be considered the name of the "release". It is often
(but not always) equal to the "codename" or "suite".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiContentDebReleasesCreateRequest
 */
func (a *ContentReleasesApiService) ContentDebReleasesCreate(ctx _context.Context) ApiContentDebReleasesCreateRequest {
	return ApiContentDebReleasesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DebReleaseResponse
 */
func (a *ContentReleasesApiService) ContentDebReleasesCreateExecute(r ApiContentDebReleasesCreateRequest) (DebReleaseResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DebReleaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleasesApiService.ContentDebReleasesCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/releases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.debRelease == nil {
		return localVarReturnValue, nil, reportError("debRelease is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.debRelease
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentDebReleasesListRequest struct {
	ctx _context.Context
	ApiService *ContentReleasesApiService
	codename *string
	distribution *string
	limit *int32
	offset *int32
	ordering *[]string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	suite *string
	fields *string
	excludeFields *string
}

func (r ApiContentDebReleasesListRequest) Codename(codename string) ApiContentDebReleasesListRequest {
	r.codename = &codename
	return r
}
func (r ApiContentDebReleasesListRequest) Distribution(distribution string) ApiContentDebReleasesListRequest {
	r.distribution = &distribution
	return r
}
func (r ApiContentDebReleasesListRequest) Limit(limit int32) ApiContentDebReleasesListRequest {
	r.limit = &limit
	return r
}
func (r ApiContentDebReleasesListRequest) Offset(offset int32) ApiContentDebReleasesListRequest {
	r.offset = &offset
	return r
}
func (r ApiContentDebReleasesListRequest) Ordering(ordering []string) ApiContentDebReleasesListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiContentDebReleasesListRequest) RepositoryVersion(repositoryVersion string) ApiContentDebReleasesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}
func (r ApiContentDebReleasesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ApiContentDebReleasesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}
func (r ApiContentDebReleasesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ApiContentDebReleasesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}
func (r ApiContentDebReleasesListRequest) Suite(suite string) ApiContentDebReleasesListRequest {
	r.suite = &suite
	return r
}
func (r ApiContentDebReleasesListRequest) Fields(fields string) ApiContentDebReleasesListRequest {
	r.fields = &fields
	return r
}
func (r ApiContentDebReleasesListRequest) ExcludeFields(excludeFields string) ApiContentDebReleasesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentDebReleasesListRequest) Execute() (PaginateddebReleaseResponseList, *_nethttp.Response, error) {
	return r.ApiService.ContentDebReleasesListExecute(r)
}

/*
 * ContentDebReleasesList List releases
 * A Release represents a single APT release/distribution.

Associated artifacts: None; contains only metadata.

Note that in the context of the "Release content", the terms "distribution" and "release"
are synonyms. An "APT repository release/distribution" is associated with a single 'Release'
file below the 'dists/' folder. The "distribution" refers to the path between 'dists/' and the
'Release' file. The "distribution" could be considered the name of the "release". It is often
(but not always) equal to the "codename" or "suite".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiContentDebReleasesListRequest
 */
func (a *ContentReleasesApiService) ContentDebReleasesList(ctx _context.Context) ApiContentDebReleasesListRequest {
	return ApiContentDebReleasesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginateddebReleaseResponseList
 */
func (a *ContentReleasesApiService) ContentDebReleasesListExecute(r ApiContentDebReleasesListRequest) (PaginateddebReleaseResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginateddebReleaseResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleasesApiService.ContentDebReleasesList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/releases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.codename != nil {
		localVarQueryParams.Add("codename", parameterToString(*r.codename, ""))
	}
	if r.distribution != nil {
		localVarQueryParams.Add("distribution", parameterToString(*r.distribution, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.repositoryVersion != nil {
		localVarQueryParams.Add("repository_version", parameterToString(*r.repositoryVersion, ""))
	}
	if r.repositoryVersionAdded != nil {
		localVarQueryParams.Add("repository_version_added", parameterToString(*r.repositoryVersionAdded, ""))
	}
	if r.repositoryVersionRemoved != nil {
		localVarQueryParams.Add("repository_version_removed", parameterToString(*r.repositoryVersionRemoved, ""))
	}
	if r.suite != nil {
		localVarQueryParams.Add("suite", parameterToString(*r.suite, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentDebReleasesReadRequest struct {
	ctx _context.Context
	ApiService *ContentReleasesApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiContentDebReleasesReadRequest) Fields(fields string) ApiContentDebReleasesReadRequest {
	r.fields = &fields
	return r
}
func (r ApiContentDebReleasesReadRequest) ExcludeFields(excludeFields string) ApiContentDebReleasesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentDebReleasesReadRequest) Execute() (DebReleaseResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentDebReleasesReadExecute(r)
}

/*
 * ContentDebReleasesRead Inspect a release
 * A Release represents a single APT release/distribution.

Associated artifacts: None; contains only metadata.

Note that in the context of the "Release content", the terms "distribution" and "release"
are synonyms. An "APT repository release/distribution" is associated with a single 'Release'
file below the 'dists/' folder. The "distribution" refers to the path between 'dists/' and the
'Release' file. The "distribution" could be considered the name of the "release". It is often
(but not always) equal to the "codename" or "suite".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this release.
 * @return ApiContentDebReleasesReadRequest
 */
func (a *ContentReleasesApiService) ContentDebReleasesRead(ctx _context.Context, pulpId string) ApiContentDebReleasesReadRequest {
	return ApiContentDebReleasesReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return DebReleaseResponse
 */
func (a *ContentReleasesApiService) ContentDebReleasesReadExecute(r ApiContentDebReleasesReadRequest) (DebReleaseResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DebReleaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleasesApiService.ContentDebReleasesRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/releases/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
