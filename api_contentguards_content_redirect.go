/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ContentguardsContentRedirectApiService ContentguardsContentRedirectApi service
type ContentguardsContentRedirectApiService service

type ApiContentguardsCoreContentRedirectAddRoleRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	nestedRole *NestedRole
}

func (r ApiContentguardsCoreContentRedirectAddRoleRequest) NestedRole(nestedRole NestedRole) ApiContentguardsCoreContentRedirectAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ApiContentguardsCoreContentRedirectAddRoleRequest) Execute() (NestedRoleResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectAddRoleExecute(r)
}

/*
 * ContentguardsCoreContentRedirectAddRole Method for ContentguardsCoreContentRedirectAddRole
 * Add a role for this object to users/groups.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectAddRoleRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectAddRole(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectAddRoleRequest {
	return ApiContentguardsCoreContentRedirectAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return NestedRoleResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectAddRoleExecute(r ApiContentguardsCoreContentRedirectAddRoleRequest) (NestedRoleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectAddRole")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectCreateRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuard *ContentRedirectContentGuard
}

func (r ApiContentguardsCoreContentRedirectCreateRequest) ContentRedirectContentGuard(contentRedirectContentGuard ContentRedirectContentGuard) ApiContentguardsCoreContentRedirectCreateRequest {
	r.contentRedirectContentGuard = &contentRedirectContentGuard
	return r
}

func (r ApiContentguardsCoreContentRedirectCreateRequest) Execute() (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectCreateExecute(r)
}

/*
 * ContentguardsCoreContentRedirectCreate Create a content redirect content guard
 * Content guard to protect preauthenticated redirects to the content app.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiContentguardsCoreContentRedirectCreateRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectCreate(ctx _context.Context) ApiContentguardsCoreContentRedirectCreateRequest {
	return ApiContentguardsCoreContentRedirectCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ContentRedirectContentGuardResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectCreateExecute(r ApiContentguardsCoreContentRedirectCreateRequest) (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.contentRedirectContentGuard == nil {
		return localVarReturnValue, nil, reportError("contentRedirectContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentRedirectContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectDeleteRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
}


func (r ApiContentguardsCoreContentRedirectDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectDeleteExecute(r)
}

/*
 * ContentguardsCoreContentRedirectDelete Delete a content redirect content guard
 * Content guard to protect preauthenticated redirects to the content app.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectDeleteRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectDelete(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectDeleteRequest {
	return ApiContentguardsCoreContentRedirectDeleteRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectDeleteExecute(r ApiContentguardsCoreContentRedirectDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectListRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	fields *string
	excludeFields *string
}

func (r ApiContentguardsCoreContentRedirectListRequest) Limit(limit int32) ApiContentguardsCoreContentRedirectListRequest {
	r.limit = &limit
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) Name(name string) ApiContentguardsCoreContentRedirectListRequest {
	r.name = &name
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) NameContains(nameContains string) ApiContentguardsCoreContentRedirectListRequest {
	r.nameContains = &nameContains
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) NameIcontains(nameIcontains string) ApiContentguardsCoreContentRedirectListRequest {
	r.nameIcontains = &nameIcontains
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) NameIn(nameIn []string) ApiContentguardsCoreContentRedirectListRequest {
	r.nameIn = &nameIn
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) NameStartswith(nameStartswith string) ApiContentguardsCoreContentRedirectListRequest {
	r.nameStartswith = &nameStartswith
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) Offset(offset int32) ApiContentguardsCoreContentRedirectListRequest {
	r.offset = &offset
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) Ordering(ordering []string) ApiContentguardsCoreContentRedirectListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) Fields(fields string) ApiContentguardsCoreContentRedirectListRequest {
	r.fields = &fields
	return r
}
func (r ApiContentguardsCoreContentRedirectListRequest) ExcludeFields(excludeFields string) ApiContentguardsCoreContentRedirectListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentguardsCoreContentRedirectListRequest) Execute() (PaginatedContentRedirectContentGuardResponseList, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectListExecute(r)
}

/*
 * ContentguardsCoreContentRedirectList List content redirect content guards
 * Content guard to protect preauthenticated redirects to the content app.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiContentguardsCoreContentRedirectListRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectList(ctx _context.Context) ApiContentguardsCoreContentRedirectListRequest {
	return ApiContentguardsCoreContentRedirectListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedContentRedirectContentGuardResponseList
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectListExecute(r ApiContentguardsCoreContentRedirectListRequest) (PaginatedContentRedirectContentGuardResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedContentRedirectContentGuardResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.nameContains != nil {
		localVarQueryParams.Add("name__contains", parameterToString(*r.nameContains, ""))
	}
	if r.nameIcontains != nil {
		localVarQueryParams.Add("name__icontains", parameterToString(*r.nameIcontains, ""))
	}
	if r.nameIn != nil {
		localVarQueryParams.Add("name__in", parameterToString(*r.nameIn, "csv"))
	}
	if r.nameStartswith != nil {
		localVarQueryParams.Add("name__startswith", parameterToString(*r.nameStartswith, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectListRolesRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiContentguardsCoreContentRedirectListRolesRequest) Fields(fields string) ApiContentguardsCoreContentRedirectListRolesRequest {
	r.fields = &fields
	return r
}
func (r ApiContentguardsCoreContentRedirectListRolesRequest) ExcludeFields(excludeFields string) ApiContentguardsCoreContentRedirectListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentguardsCoreContentRedirectListRolesRequest) Execute() (ObjectRolesResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectListRolesExecute(r)
}

/*
 * ContentguardsCoreContentRedirectListRoles Method for ContentguardsCoreContentRedirectListRoles
 * List roles assigned to this object.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectListRolesRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectListRoles(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectListRolesRequest {
	return ApiContentguardsCoreContentRedirectListRolesRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return ObjectRolesResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectListRolesExecute(r ApiContentguardsCoreContentRedirectListRolesRequest) (ObjectRolesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectListRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectMyPermissionsRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiContentguardsCoreContentRedirectMyPermissionsRequest) Fields(fields string) ApiContentguardsCoreContentRedirectMyPermissionsRequest {
	r.fields = &fields
	return r
}
func (r ApiContentguardsCoreContentRedirectMyPermissionsRequest) ExcludeFields(excludeFields string) ApiContentguardsCoreContentRedirectMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentguardsCoreContentRedirectMyPermissionsRequest) Execute() (MyPermissionsResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectMyPermissionsExecute(r)
}

/*
 * ContentguardsCoreContentRedirectMyPermissions Method for ContentguardsCoreContentRedirectMyPermissions
 * List permissions available to the current user on this object.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectMyPermissionsRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectMyPermissions(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectMyPermissionsRequest {
	return ApiContentguardsCoreContentRedirectMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return MyPermissionsResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectMyPermissionsExecute(r ApiContentguardsCoreContentRedirectMyPermissionsRequest) (MyPermissionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	patchedContentRedirectContentGuard *PatchedContentRedirectContentGuard
}

func (r ApiContentguardsCoreContentRedirectPartialUpdateRequest) PatchedContentRedirectContentGuard(patchedContentRedirectContentGuard PatchedContentRedirectContentGuard) ApiContentguardsCoreContentRedirectPartialUpdateRequest {
	r.patchedContentRedirectContentGuard = &patchedContentRedirectContentGuard
	return r
}

func (r ApiContentguardsCoreContentRedirectPartialUpdateRequest) Execute() (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectPartialUpdateExecute(r)
}

/*
 * ContentguardsCoreContentRedirectPartialUpdate Update a content redirect content guard
 * Content guard to protect preauthenticated redirects to the content app.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectPartialUpdateRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectPartialUpdate(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectPartialUpdateRequest {
	return ApiContentguardsCoreContentRedirectPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return ContentRedirectContentGuardResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectPartialUpdateExecute(r ApiContentguardsCoreContentRedirectPartialUpdateRequest) (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchedContentRedirectContentGuard == nil {
		return localVarReturnValue, nil, reportError("patchedContentRedirectContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedContentRedirectContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectReadRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiContentguardsCoreContentRedirectReadRequest) Fields(fields string) ApiContentguardsCoreContentRedirectReadRequest {
	r.fields = &fields
	return r
}
func (r ApiContentguardsCoreContentRedirectReadRequest) ExcludeFields(excludeFields string) ApiContentguardsCoreContentRedirectReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiContentguardsCoreContentRedirectReadRequest) Execute() (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectReadExecute(r)
}

/*
 * ContentguardsCoreContentRedirectRead Inspect a content redirect content guard
 * Content guard to protect preauthenticated redirects to the content app.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectReadRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectRead(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectReadRequest {
	return ApiContentguardsCoreContentRedirectReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return ContentRedirectContentGuardResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectReadExecute(r ApiContentguardsCoreContentRedirectReadRequest) (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectRemoveRoleRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	nestedRole *NestedRole
}

func (r ApiContentguardsCoreContentRedirectRemoveRoleRequest) NestedRole(nestedRole NestedRole) ApiContentguardsCoreContentRedirectRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ApiContentguardsCoreContentRedirectRemoveRoleRequest) Execute() (NestedRoleResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectRemoveRoleExecute(r)
}

/*
 * ContentguardsCoreContentRedirectRemoveRole Method for ContentguardsCoreContentRedirectRemoveRole
 * Remove a role for this object from users/groups.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectRemoveRoleRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectRemoveRole(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectRemoveRoleRequest {
	return ApiContentguardsCoreContentRedirectRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return NestedRoleResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectRemoveRoleExecute(r ApiContentguardsCoreContentRedirectRemoveRoleRequest) (NestedRoleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContentguardsCoreContentRedirectUpdateRequest struct {
	ctx _context.Context
	ApiService *ContentguardsContentRedirectApiService
	pulpId string
	contentRedirectContentGuard *ContentRedirectContentGuard
}

func (r ApiContentguardsCoreContentRedirectUpdateRequest) ContentRedirectContentGuard(contentRedirectContentGuard ContentRedirectContentGuard) ApiContentguardsCoreContentRedirectUpdateRequest {
	r.contentRedirectContentGuard = &contentRedirectContentGuard
	return r
}

func (r ApiContentguardsCoreContentRedirectUpdateRequest) Execute() (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectUpdateExecute(r)
}

/*
 * ContentguardsCoreContentRedirectUpdate Update a content redirect content guard
 * Content guard to protect preauthenticated redirects to the content app.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this content redirect content guard.
 * @return ApiContentguardsCoreContentRedirectUpdateRequest
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectUpdate(ctx _context.Context, pulpId string) ApiContentguardsCoreContentRedirectUpdateRequest {
	return ApiContentguardsCoreContentRedirectUpdateRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return ContentRedirectContentGuardResponse
 */
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectUpdateExecute(r ApiContentguardsCoreContentRedirectUpdateRequest) (ContentRedirectContentGuardResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.contentRedirectContentGuard == nil {
		return localVarReturnValue, nil, reportError("contentRedirectContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentRedirectContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
