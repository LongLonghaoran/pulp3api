/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ExportersFilesystemExportsApiService ExportersFilesystemExportsApi service
type ExportersFilesystemExportsApiService service

type ApiExportersCoreFilesystemExportsCreateRequest struct {
	ctx context.Context
	ApiService *ExportersFilesystemExportsApiService
	exporterPk string
	filesystemExport *FilesystemExport
}

func (r ApiExportersCoreFilesystemExportsCreateRequest) FilesystemExport(filesystemExport FilesystemExport) ApiExportersCoreFilesystemExportsCreateRequest {
	r.filesystemExport = &filesystemExport
	return r
}

func (r ApiExportersCoreFilesystemExportsCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.ExportersCoreFilesystemExportsCreateExecute(r)
}

/*
ExportersCoreFilesystemExportsCreate Create a filesystem export

Trigger an asynchronous task to export files to the filesystem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param exporterPk
 @return ApiExportersCoreFilesystemExportsCreateRequest
*/
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsCreate(ctx context.Context, exporterPk string) ApiExportersCoreFilesystemExportsCreateRequest {
	return ApiExportersCoreFilesystemExportsCreateRequest{
		ApiService: a,
		ctx: ctx,
		exporterPk: exporterPk,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsCreateExecute(r ApiExportersCoreFilesystemExportsCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportersFilesystemExportsApiService.ExportersCoreFilesystemExportsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/"
	localVarPath = strings.Replace(localVarPath, "{"+"exporter_pk"+"}", url.PathEscape(parameterToString(r.exporterPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filesystemExport == nil {
		return localVarReturnValue, nil, reportError("filesystemExport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filesystemExport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExportersCoreFilesystemExportsDeleteRequest struct {
	ctx context.Context
	ApiService *ExportersFilesystemExportsApiService
	exporterPk string
	pulpId string
}

func (r ApiExportersCoreFilesystemExportsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExportersCoreFilesystemExportsDeleteExecute(r)
}

/*
ExportersCoreFilesystemExportsDelete Delete a filesystem export

Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param exporterPk
 @param pulpId A UUID string identifying this filesystem export.
 @return ApiExportersCoreFilesystemExportsDeleteRequest
*/
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsDelete(ctx context.Context, exporterPk string, pulpId string) ApiExportersCoreFilesystemExportsDeleteRequest {
	return ApiExportersCoreFilesystemExportsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		exporterPk: exporterPk,
		pulpId: pulpId,
	}
}

// Execute executes the request
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsDeleteExecute(r ApiExportersCoreFilesystemExportsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportersFilesystemExportsApiService.ExportersCoreFilesystemExportsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"exporter_pk"+"}", url.PathEscape(parameterToString(r.exporterPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", url.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExportersCoreFilesystemExportsListRequest struct {
	ctx context.Context
	ApiService *ExportersFilesystemExportsApiService
	exporterPk string
	limit *int32
	offset *int32
	fields *string
	excludeFields *string
}

// Number of results to return per page.
func (r ApiExportersCoreFilesystemExportsListRequest) Limit(limit int32) ApiExportersCoreFilesystemExportsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExportersCoreFilesystemExportsListRequest) Offset(offset int32) ApiExportersCoreFilesystemExportsListRequest {
	r.offset = &offset
	return r
}

// A list of fields to include in the response.
func (r ApiExportersCoreFilesystemExportsListRequest) Fields(fields string) ApiExportersCoreFilesystemExportsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiExportersCoreFilesystemExportsListRequest) ExcludeFields(excludeFields string) ApiExportersCoreFilesystemExportsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiExportersCoreFilesystemExportsListRequest) Execute() (*PaginatedFilesystemExportResponseList, *http.Response, error) {
	return r.ApiService.ExportersCoreFilesystemExportsListExecute(r)
}

/*
ExportersCoreFilesystemExportsList List filesystem exports

Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param exporterPk
 @return ApiExportersCoreFilesystemExportsListRequest
*/
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsList(ctx context.Context, exporterPk string) ApiExportersCoreFilesystemExportsListRequest {
	return ApiExportersCoreFilesystemExportsListRequest{
		ApiService: a,
		ctx: ctx,
		exporterPk: exporterPk,
	}
}

// Execute executes the request
//  @return PaginatedFilesystemExportResponseList
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsListExecute(r ApiExportersCoreFilesystemExportsListRequest) (*PaginatedFilesystemExportResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedFilesystemExportResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportersFilesystemExportsApiService.ExportersCoreFilesystemExportsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/"
	localVarPath = strings.Replace(localVarPath, "{"+"exporter_pk"+"}", url.PathEscape(parameterToString(r.exporterPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExportersCoreFilesystemExportsReadRequest struct {
	ctx context.Context
	ApiService *ExportersFilesystemExportsApiService
	exporterPk string
	pulpId string
	fields *string
	excludeFields *string
}

// A list of fields to include in the response.
func (r ApiExportersCoreFilesystemExportsReadRequest) Fields(fields string) ApiExportersCoreFilesystemExportsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiExportersCoreFilesystemExportsReadRequest) ExcludeFields(excludeFields string) ApiExportersCoreFilesystemExportsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiExportersCoreFilesystemExportsReadRequest) Execute() (*FilesystemExportResponse, *http.Response, error) {
	return r.ApiService.ExportersCoreFilesystemExportsReadExecute(r)
}

/*
ExportersCoreFilesystemExportsRead Inspect a filesystem export

Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param exporterPk
 @param pulpId A UUID string identifying this filesystem export.
 @return ApiExportersCoreFilesystemExportsReadRequest
*/
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsRead(ctx context.Context, exporterPk string, pulpId string) ApiExportersCoreFilesystemExportsReadRequest {
	return ApiExportersCoreFilesystemExportsReadRequest{
		ApiService: a,
		ctx: ctx,
		exporterPk: exporterPk,
		pulpId: pulpId,
	}
}

// Execute executes the request
//  @return FilesystemExportResponse
func (a *ExportersFilesystemExportsApiService) ExportersCoreFilesystemExportsReadExecute(r ApiExportersCoreFilesystemExportsReadRequest) (*FilesystemExportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesystemExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportersFilesystemExportsApiService.ExportersCoreFilesystemExportsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"exporter_pk"+"}", url.PathEscape(parameterToString(r.exporterPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", url.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
