/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// GroupsRolesApiService GroupsRolesApi service
type GroupsRolesApiService service

type ApiGroupsRolesCreateRequest struct {
	ctx _context.Context
	ApiService *GroupsRolesApiService
	groupPk string
	groupRole *GroupRole
}

func (r ApiGroupsRolesCreateRequest) GroupRole(groupRole GroupRole) ApiGroupsRolesCreateRequest {
	r.groupRole = &groupRole
	return r
}

func (r ApiGroupsRolesCreateRequest) Execute() (GroupRoleResponse, *_nethttp.Response, error) {
	return r.ApiService.GroupsRolesCreateExecute(r)
}

/*
 * GroupsRolesCreate Create a group role
 * ViewSet for GroupRole.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupPk
 * @return ApiGroupsRolesCreateRequest
 */
func (a *GroupsRolesApiService) GroupsRolesCreate(ctx _context.Context, groupPk string) ApiGroupsRolesCreateRequest {
	return ApiGroupsRolesCreateRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
	}
}

/*
 * Execute executes the request
 * @return GroupRoleResponse
 */
func (a *GroupsRolesApiService) GroupsRolesCreateExecute(r ApiGroupsRolesCreateRequest) (GroupRoleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GroupRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsRolesApiService.GroupsRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", _neturl.PathEscape(parameterToString(r.groupPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.groupRole == nil {
		return localVarReturnValue, nil, reportError("groupRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.groupRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsRolesDeleteRequest struct {
	ctx _context.Context
	ApiService *GroupsRolesApiService
	groupPk string
	pulpId string
}


func (r ApiGroupsRolesDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsRolesDeleteExecute(r)
}

/*
 * GroupsRolesDelete Delete a group role
 * ViewSet for GroupRole.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupPk
 * @param pulpId A UUID string identifying this group role.
 * @return ApiGroupsRolesDeleteRequest
 */
func (a *GroupsRolesApiService) GroupsRolesDelete(ctx _context.Context, groupPk string, pulpId string) ApiGroupsRolesDeleteRequest {
	return ApiGroupsRolesDeleteRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 */
func (a *GroupsRolesApiService) GroupsRolesDeleteExecute(r ApiGroupsRolesDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsRolesApiService.GroupsRolesDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", _neturl.PathEscape(parameterToString(r.groupPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsRolesListRequest struct {
	ctx _context.Context
	ApiService *GroupsRolesApiService
	groupPk string
	contentObject *string
	limit *int32
	offset *int32
	ordering *[]string
	role *string
	roleContains *string
	roleIcontains *string
	roleIn *[]string
	roleStartswith *string
	fields *string
	excludeFields *string
}

func (r ApiGroupsRolesListRequest) ContentObject(contentObject string) ApiGroupsRolesListRequest {
	r.contentObject = &contentObject
	return r
}
func (r ApiGroupsRolesListRequest) Limit(limit int32) ApiGroupsRolesListRequest {
	r.limit = &limit
	return r
}
func (r ApiGroupsRolesListRequest) Offset(offset int32) ApiGroupsRolesListRequest {
	r.offset = &offset
	return r
}
func (r ApiGroupsRolesListRequest) Ordering(ordering []string) ApiGroupsRolesListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiGroupsRolesListRequest) Role(role string) ApiGroupsRolesListRequest {
	r.role = &role
	return r
}
func (r ApiGroupsRolesListRequest) RoleContains(roleContains string) ApiGroupsRolesListRequest {
	r.roleContains = &roleContains
	return r
}
func (r ApiGroupsRolesListRequest) RoleIcontains(roleIcontains string) ApiGroupsRolesListRequest {
	r.roleIcontains = &roleIcontains
	return r
}
func (r ApiGroupsRolesListRequest) RoleIn(roleIn []string) ApiGroupsRolesListRequest {
	r.roleIn = &roleIn
	return r
}
func (r ApiGroupsRolesListRequest) RoleStartswith(roleStartswith string) ApiGroupsRolesListRequest {
	r.roleStartswith = &roleStartswith
	return r
}
func (r ApiGroupsRolesListRequest) Fields(fields string) ApiGroupsRolesListRequest {
	r.fields = &fields
	return r
}
func (r ApiGroupsRolesListRequest) ExcludeFields(excludeFields string) ApiGroupsRolesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGroupsRolesListRequest) Execute() (PaginatedGroupRoleResponseList, *_nethttp.Response, error) {
	return r.ApiService.GroupsRolesListExecute(r)
}

/*
 * GroupsRolesList List group roles
 * ViewSet for GroupRole.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupPk
 * @return ApiGroupsRolesListRequest
 */
func (a *GroupsRolesApiService) GroupsRolesList(ctx _context.Context, groupPk string) ApiGroupsRolesListRequest {
	return ApiGroupsRolesListRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
	}
}

/*
 * Execute executes the request
 * @return PaginatedGroupRoleResponseList
 */
func (a *GroupsRolesApiService) GroupsRolesListExecute(r ApiGroupsRolesListRequest) (PaginatedGroupRoleResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedGroupRoleResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsRolesApiService.GroupsRolesList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", _neturl.PathEscape(parameterToString(r.groupPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.contentObject != nil {
		localVarQueryParams.Add("content_object", parameterToString(*r.contentObject, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.role != nil {
		localVarQueryParams.Add("role", parameterToString(*r.role, ""))
	}
	if r.roleContains != nil {
		localVarQueryParams.Add("role__contains", parameterToString(*r.roleContains, ""))
	}
	if r.roleIcontains != nil {
		localVarQueryParams.Add("role__icontains", parameterToString(*r.roleIcontains, ""))
	}
	if r.roleIn != nil {
		localVarQueryParams.Add("role__in", parameterToString(*r.roleIn, "csv"))
	}
	if r.roleStartswith != nil {
		localVarQueryParams.Add("role__startswith", parameterToString(*r.roleStartswith, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsRolesReadRequest struct {
	ctx _context.Context
	ApiService *GroupsRolesApiService
	groupPk string
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiGroupsRolesReadRequest) Fields(fields string) ApiGroupsRolesReadRequest {
	r.fields = &fields
	return r
}
func (r ApiGroupsRolesReadRequest) ExcludeFields(excludeFields string) ApiGroupsRolesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGroupsRolesReadRequest) Execute() (GroupRoleResponse, *_nethttp.Response, error) {
	return r.ApiService.GroupsRolesReadExecute(r)
}

/*
 * GroupsRolesRead Inspect a group role
 * ViewSet for GroupRole.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupPk
 * @param pulpId A UUID string identifying this group role.
 * @return ApiGroupsRolesReadRequest
 */
func (a *GroupsRolesApiService) GroupsRolesRead(ctx _context.Context, groupPk string, pulpId string) ApiGroupsRolesReadRequest {
	return ApiGroupsRolesReadRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return GroupRoleResponse
 */
func (a *GroupsRolesApiService) GroupsRolesReadExecute(r ApiGroupsRolesReadRequest) (GroupRoleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GroupRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsRolesApiService.GroupsRolesRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", _neturl.PathEscape(parameterToString(r.groupPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
