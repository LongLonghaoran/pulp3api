/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// GroupsUsersApiService GroupsUsersApi service
type GroupsUsersApiService service

type ApiGroupsUsersCreateRequest struct {
	ctx context.Context
	ApiService *GroupsUsersApiService
	groupPk string
	groupUser *GroupUser
}

func (r ApiGroupsUsersCreateRequest) GroupUser(groupUser GroupUser) ApiGroupsUsersCreateRequest {
	r.groupUser = &groupUser
	return r
}

func (r ApiGroupsUsersCreateRequest) Execute() (*GroupUserResponse, *http.Response, error) {
	return r.ApiService.GroupsUsersCreateExecute(r)
}

/*
GroupsUsersCreate Create an user

Add a user to a group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupPk
 @return ApiGroupsUsersCreateRequest
*/
func (a *GroupsUsersApiService) GroupsUsersCreate(ctx context.Context, groupPk string) ApiGroupsUsersCreateRequest {
	return ApiGroupsUsersCreateRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
	}
}

// Execute executes the request
//  @return GroupUserResponse
func (a *GroupsUsersApiService) GroupsUsersCreateExecute(r ApiGroupsUsersCreateRequest) (*GroupUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GroupUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsUsersApiService.GroupsUsersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/users/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", url.PathEscape(parameterToString(r.groupPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupUser == nil {
		return localVarReturnValue, nil, reportError("groupUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.groupUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsUsersDeleteRequest struct {
	ctx context.Context
	ApiService *GroupsUsersApiService
	groupPk string
	id int32
}

func (r ApiGroupsUsersDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GroupsUsersDeleteExecute(r)
}

/*
GroupsUsersDelete Delete an user

Remove a user from a group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupPk
 @param id A unique integer value identifying this user.
 @return ApiGroupsUsersDeleteRequest
*/
func (a *GroupsUsersApiService) GroupsUsersDelete(ctx context.Context, groupPk string, id int32) ApiGroupsUsersDeleteRequest {
	return ApiGroupsUsersDeleteRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
		id: id,
	}
}

// Execute executes the request
func (a *GroupsUsersApiService) GroupsUsersDeleteExecute(r ApiGroupsUsersDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsUsersApiService.GroupsUsersDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/users/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", url.PathEscape(parameterToString(r.groupPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsUsersListRequest struct {
	ctx context.Context
	ApiService *GroupsUsersApiService
	groupPk string
	limit *int32
	offset *int32
	fields *string
	excludeFields *string
}

// Number of results to return per page.
func (r ApiGroupsUsersListRequest) Limit(limit int32) ApiGroupsUsersListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiGroupsUsersListRequest) Offset(offset int32) ApiGroupsUsersListRequest {
	r.offset = &offset
	return r
}

// A list of fields to include in the response.
func (r ApiGroupsUsersListRequest) Fields(fields string) ApiGroupsUsersListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ApiGroupsUsersListRequest) ExcludeFields(excludeFields string) ApiGroupsUsersListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGroupsUsersListRequest) Execute() (*PaginatedGroupUserResponseList, *http.Response, error) {
	return r.ApiService.GroupsUsersListExecute(r)
}

/*
GroupsUsersList List users

List group users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupPk
 @return ApiGroupsUsersListRequest
*/
func (a *GroupsUsersApiService) GroupsUsersList(ctx context.Context, groupPk string) ApiGroupsUsersListRequest {
	return ApiGroupsUsersListRequest{
		ApiService: a,
		ctx: ctx,
		groupPk: groupPk,
	}
}

// Execute executes the request
//  @return PaginatedGroupUserResponseList
func (a *GroupsUsersApiService) GroupsUsersListExecute(r ApiGroupsUsersListRequest) (*PaginatedGroupUserResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedGroupUserResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsUsersApiService.GroupsUsersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/groups/{group_pk}/users/"
	localVarPath = strings.Replace(localVarPath, "{"+"group_pk"+"}", url.PathEscape(parameterToString(r.groupPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
