/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// PublicationsVerbatimApiService PublicationsVerbatimApi service
type PublicationsVerbatimApiService service

type ApiPublicationsDebVerbatimCreateRequest struct {
	ctx _context.Context
	ApiService *PublicationsVerbatimApiService
	debVerbatimPublication *DebVerbatimPublication
}

func (r ApiPublicationsDebVerbatimCreateRequest) DebVerbatimPublication(debVerbatimPublication DebVerbatimPublication) ApiPublicationsDebVerbatimCreateRequest {
	r.debVerbatimPublication = &debVerbatimPublication
	return r
}

func (r ApiPublicationsDebVerbatimCreateRequest) Execute() (AsyncOperationResponse, *_nethttp.Response, error) {
	return r.ApiService.PublicationsDebVerbatimCreateExecute(r)
}

/*
 * PublicationsDebVerbatimCreate Create a verbatim publication
 * Trigger an asynchronous task to publish content
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPublicationsDebVerbatimCreateRequest
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimCreate(ctx _context.Context) ApiPublicationsDebVerbatimCreateRequest {
	return ApiPublicationsDebVerbatimCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AsyncOperationResponse
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimCreateExecute(r ApiPublicationsDebVerbatimCreateRequest) (AsyncOperationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicationsVerbatimApiService.PublicationsDebVerbatimCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/publications/deb/verbatim/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.debVerbatimPublication == nil {
		return localVarReturnValue, nil, reportError("debVerbatimPublication is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.debVerbatimPublication
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublicationsDebVerbatimDeleteRequest struct {
	ctx _context.Context
	ApiService *PublicationsVerbatimApiService
	pulpId string
}


func (r ApiPublicationsDebVerbatimDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PublicationsDebVerbatimDeleteExecute(r)
}

/*
 * PublicationsDebVerbatimDelete Delete a verbatim publication
 * An VerbatimPublication is the Pulp-internal representation of a "mirrored" AptRepositoryVersion.

In other words, the verbatim publisher will recreate the synced subset of some a APT
repository using the exact same metadata files and signatures as used by the upstream original.
Once a Pulp publication has been created, it can be served by creating a Pulp distribution (in
a near atomic action).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this verbatim publication.
 * @return ApiPublicationsDebVerbatimDeleteRequest
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimDelete(ctx _context.Context, pulpId string) ApiPublicationsDebVerbatimDeleteRequest {
	return ApiPublicationsDebVerbatimDeleteRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimDeleteExecute(r ApiPublicationsDebVerbatimDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicationsVerbatimApiService.PublicationsDebVerbatimDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/publications/deb/verbatim/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPublicationsDebVerbatimListRequest struct {
	ctx _context.Context
	ApiService *PublicationsVerbatimApiService
	content *string
	contentIn *string
	limit *int32
	offset *int32
	ordering *[]string
	pulpCreated *time.Time
	pulpCreatedGt *time.Time
	pulpCreatedGte *time.Time
	pulpCreatedLt *time.Time
	pulpCreatedLte *time.Time
	pulpCreatedRange *[]time.Time
	repository *string
	repositoryVersion *string
	fields *string
	excludeFields *string
}

func (r ApiPublicationsDebVerbatimListRequest) Content(content string) ApiPublicationsDebVerbatimListRequest {
	r.content = &content
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) ContentIn(contentIn string) ApiPublicationsDebVerbatimListRequest {
	r.contentIn = &contentIn
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) Limit(limit int32) ApiPublicationsDebVerbatimListRequest {
	r.limit = &limit
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) Offset(offset int32) ApiPublicationsDebVerbatimListRequest {
	r.offset = &offset
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) Ordering(ordering []string) ApiPublicationsDebVerbatimListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) PulpCreated(pulpCreated time.Time) ApiPublicationsDebVerbatimListRequest {
	r.pulpCreated = &pulpCreated
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) PulpCreatedGt(pulpCreatedGt time.Time) ApiPublicationsDebVerbatimListRequest {
	r.pulpCreatedGt = &pulpCreatedGt
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) PulpCreatedGte(pulpCreatedGte time.Time) ApiPublicationsDebVerbatimListRequest {
	r.pulpCreatedGte = &pulpCreatedGte
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) PulpCreatedLt(pulpCreatedLt time.Time) ApiPublicationsDebVerbatimListRequest {
	r.pulpCreatedLt = &pulpCreatedLt
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) PulpCreatedLte(pulpCreatedLte time.Time) ApiPublicationsDebVerbatimListRequest {
	r.pulpCreatedLte = &pulpCreatedLte
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) PulpCreatedRange(pulpCreatedRange []time.Time) ApiPublicationsDebVerbatimListRequest {
	r.pulpCreatedRange = &pulpCreatedRange
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) Repository(repository string) ApiPublicationsDebVerbatimListRequest {
	r.repository = &repository
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) RepositoryVersion(repositoryVersion string) ApiPublicationsDebVerbatimListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) Fields(fields string) ApiPublicationsDebVerbatimListRequest {
	r.fields = &fields
	return r
}
func (r ApiPublicationsDebVerbatimListRequest) ExcludeFields(excludeFields string) ApiPublicationsDebVerbatimListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiPublicationsDebVerbatimListRequest) Execute() (PaginateddebVerbatimPublicationResponseList, *_nethttp.Response, error) {
	return r.ApiService.PublicationsDebVerbatimListExecute(r)
}

/*
 * PublicationsDebVerbatimList List verbatim publications
 * An VerbatimPublication is the Pulp-internal representation of a "mirrored" AptRepositoryVersion.

In other words, the verbatim publisher will recreate the synced subset of some a APT
repository using the exact same metadata files and signatures as used by the upstream original.
Once a Pulp publication has been created, it can be served by creating a Pulp distribution (in
a near atomic action).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPublicationsDebVerbatimListRequest
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimList(ctx _context.Context) ApiPublicationsDebVerbatimListRequest {
	return ApiPublicationsDebVerbatimListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginateddebVerbatimPublicationResponseList
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimListExecute(r ApiPublicationsDebVerbatimListRequest) (PaginateddebVerbatimPublicationResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginateddebVerbatimPublicationResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicationsVerbatimApiService.PublicationsDebVerbatimList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/publications/deb/verbatim/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.content != nil {
		localVarQueryParams.Add("content", parameterToString(*r.content, ""))
	}
	if r.contentIn != nil {
		localVarQueryParams.Add("content__in", parameterToString(*r.contentIn, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.pulpCreated != nil {
		localVarQueryParams.Add("pulp_created", parameterToString(*r.pulpCreated, ""))
	}
	if r.pulpCreatedGt != nil {
		localVarQueryParams.Add("pulp_created__gt", parameterToString(*r.pulpCreatedGt, ""))
	}
	if r.pulpCreatedGte != nil {
		localVarQueryParams.Add("pulp_created__gte", parameterToString(*r.pulpCreatedGte, ""))
	}
	if r.pulpCreatedLt != nil {
		localVarQueryParams.Add("pulp_created__lt", parameterToString(*r.pulpCreatedLt, ""))
	}
	if r.pulpCreatedLte != nil {
		localVarQueryParams.Add("pulp_created__lte", parameterToString(*r.pulpCreatedLte, ""))
	}
	if r.pulpCreatedRange != nil {
		localVarQueryParams.Add("pulp_created__range", parameterToString(*r.pulpCreatedRange, "csv"))
	}
	if r.repository != nil {
		localVarQueryParams.Add("repository", parameterToString(*r.repository, ""))
	}
	if r.repositoryVersion != nil {
		localVarQueryParams.Add("repository_version", parameterToString(*r.repositoryVersion, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublicationsDebVerbatimReadRequest struct {
	ctx _context.Context
	ApiService *PublicationsVerbatimApiService
	pulpId string
	fields *string
	excludeFields *string
}

func (r ApiPublicationsDebVerbatimReadRequest) Fields(fields string) ApiPublicationsDebVerbatimReadRequest {
	r.fields = &fields
	return r
}
func (r ApiPublicationsDebVerbatimReadRequest) ExcludeFields(excludeFields string) ApiPublicationsDebVerbatimReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiPublicationsDebVerbatimReadRequest) Execute() (DebVerbatimPublicationResponse, *_nethttp.Response, error) {
	return r.ApiService.PublicationsDebVerbatimReadExecute(r)
}

/*
 * PublicationsDebVerbatimRead Inspect a verbatim publication
 * An VerbatimPublication is the Pulp-internal representation of a "mirrored" AptRepositoryVersion.

In other words, the verbatim publisher will recreate the synced subset of some a APT
repository using the exact same metadata files and signatures as used by the upstream original.
Once a Pulp publication has been created, it can be served by creating a Pulp distribution (in
a near atomic action).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pulpId A UUID string identifying this verbatim publication.
 * @return ApiPublicationsDebVerbatimReadRequest
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimRead(ctx _context.Context, pulpId string) ApiPublicationsDebVerbatimReadRequest {
	return ApiPublicationsDebVerbatimReadRequest{
		ApiService: a,
		ctx: ctx,
		pulpId: pulpId,
	}
}

/*
 * Execute executes the request
 * @return DebVerbatimPublicationResponse
 */
func (a *PublicationsVerbatimApiService) PublicationsDebVerbatimReadExecute(r ApiPublicationsDebVerbatimReadRequest) (DebVerbatimPublicationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DebVerbatimPublicationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicationsVerbatimApiService.PublicationsDebVerbatimRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/publications/deb/verbatim/{pulp_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_id"+"}", _neturl.PathEscape(parameterToString(r.pulpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
