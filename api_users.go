/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersApiService UsersApi service
type UsersApiService service

type ApiUsersCreateRequest struct {
	ctx _context.Context
	ApiService *UsersApiService
	user *User
}

func (r ApiUsersCreateRequest) User(user User) ApiUsersCreateRequest {
	r.user = &user
	return r
}

func (r ApiUsersCreateRequest) Execute() (UserResponse, *_nethttp.Response, error) {
	return r.ApiService.UsersCreateExecute(r)
}

/*
 * UsersCreate Create an user
 * ViewSet for User.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiUsersCreateRequest
 */
func (a *UsersApiService) UsersCreate(ctx _context.Context) ApiUsersCreateRequest {
	return ApiUsersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return UserResponse
 */
func (a *UsersApiService) UsersCreateExecute(r ApiUsersCreateRequest) (UserResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.UsersCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/users/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.user == nil {
		return localVarReturnValue, nil, reportError("user is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.user
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersDeleteRequest struct {
	ctx _context.Context
	ApiService *UsersApiService
	id int32
}


func (r ApiUsersDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteExecute(r)
}

/*
 * UsersDelete Delete an user
 * ViewSet for User.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A unique integer value identifying this user.
 * @return ApiUsersDeleteRequest
 */
func (a *UsersApiService) UsersDelete(ctx _context.Context, id int32) ApiUsersDeleteRequest {
	return ApiUsersDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *UsersApiService) UsersDeleteExecute(r ApiUsersDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.UsersDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/users/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersListRequest struct {
	ctx _context.Context
	ApiService *UsersApiService
	email *string
	emailContains *string
	emailIcontains *string
	emailIexact *string
	emailIn *[]string
	firstName *string
	firstNameContains *string
	firstNameIcontains *string
	firstNameIexact *string
	firstNameIn *[]string
	isActive *bool
	isStaff *bool
	lastName *string
	lastNameContains *string
	lastNameIcontains *string
	lastNameIexact *string
	lastNameIn *[]string
	limit *int32
	offset *int32
	ordering *[]string
	username *string
	usernameContains *string
	usernameIcontains *string
	usernameIexact *string
	usernameIn *[]string
	fields *string
	excludeFields *string
}

func (r ApiUsersListRequest) Email(email string) ApiUsersListRequest {
	r.email = &email
	return r
}
func (r ApiUsersListRequest) EmailContains(emailContains string) ApiUsersListRequest {
	r.emailContains = &emailContains
	return r
}
func (r ApiUsersListRequest) EmailIcontains(emailIcontains string) ApiUsersListRequest {
	r.emailIcontains = &emailIcontains
	return r
}
func (r ApiUsersListRequest) EmailIexact(emailIexact string) ApiUsersListRequest {
	r.emailIexact = &emailIexact
	return r
}
func (r ApiUsersListRequest) EmailIn(emailIn []string) ApiUsersListRequest {
	r.emailIn = &emailIn
	return r
}
func (r ApiUsersListRequest) FirstName(firstName string) ApiUsersListRequest {
	r.firstName = &firstName
	return r
}
func (r ApiUsersListRequest) FirstNameContains(firstNameContains string) ApiUsersListRequest {
	r.firstNameContains = &firstNameContains
	return r
}
func (r ApiUsersListRequest) FirstNameIcontains(firstNameIcontains string) ApiUsersListRequest {
	r.firstNameIcontains = &firstNameIcontains
	return r
}
func (r ApiUsersListRequest) FirstNameIexact(firstNameIexact string) ApiUsersListRequest {
	r.firstNameIexact = &firstNameIexact
	return r
}
func (r ApiUsersListRequest) FirstNameIn(firstNameIn []string) ApiUsersListRequest {
	r.firstNameIn = &firstNameIn
	return r
}
func (r ApiUsersListRequest) IsActive(isActive bool) ApiUsersListRequest {
	r.isActive = &isActive
	return r
}
func (r ApiUsersListRequest) IsStaff(isStaff bool) ApiUsersListRequest {
	r.isStaff = &isStaff
	return r
}
func (r ApiUsersListRequest) LastName(lastName string) ApiUsersListRequest {
	r.lastName = &lastName
	return r
}
func (r ApiUsersListRequest) LastNameContains(lastNameContains string) ApiUsersListRequest {
	r.lastNameContains = &lastNameContains
	return r
}
func (r ApiUsersListRequest) LastNameIcontains(lastNameIcontains string) ApiUsersListRequest {
	r.lastNameIcontains = &lastNameIcontains
	return r
}
func (r ApiUsersListRequest) LastNameIexact(lastNameIexact string) ApiUsersListRequest {
	r.lastNameIexact = &lastNameIexact
	return r
}
func (r ApiUsersListRequest) LastNameIn(lastNameIn []string) ApiUsersListRequest {
	r.lastNameIn = &lastNameIn
	return r
}
func (r ApiUsersListRequest) Limit(limit int32) ApiUsersListRequest {
	r.limit = &limit
	return r
}
func (r ApiUsersListRequest) Offset(offset int32) ApiUsersListRequest {
	r.offset = &offset
	return r
}
func (r ApiUsersListRequest) Ordering(ordering []string) ApiUsersListRequest {
	r.ordering = &ordering
	return r
}
func (r ApiUsersListRequest) Username(username string) ApiUsersListRequest {
	r.username = &username
	return r
}
func (r ApiUsersListRequest) UsernameContains(usernameContains string) ApiUsersListRequest {
	r.usernameContains = &usernameContains
	return r
}
func (r ApiUsersListRequest) UsernameIcontains(usernameIcontains string) ApiUsersListRequest {
	r.usernameIcontains = &usernameIcontains
	return r
}
func (r ApiUsersListRequest) UsernameIexact(usernameIexact string) ApiUsersListRequest {
	r.usernameIexact = &usernameIexact
	return r
}
func (r ApiUsersListRequest) UsernameIn(usernameIn []string) ApiUsersListRequest {
	r.usernameIn = &usernameIn
	return r
}
func (r ApiUsersListRequest) Fields(fields string) ApiUsersListRequest {
	r.fields = &fields
	return r
}
func (r ApiUsersListRequest) ExcludeFields(excludeFields string) ApiUsersListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiUsersListRequest) Execute() (PaginatedUserResponseList, *_nethttp.Response, error) {
	return r.ApiService.UsersListExecute(r)
}

/*
 * UsersList List users
 * ViewSet for User.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiUsersListRequest
 */
func (a *UsersApiService) UsersList(ctx _context.Context) ApiUsersListRequest {
	return ApiUsersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedUserResponseList
 */
func (a *UsersApiService) UsersListExecute(r ApiUsersListRequest) (PaginatedUserResponseList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedUserResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.UsersList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/users/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.email != nil {
		localVarQueryParams.Add("email", parameterToString(*r.email, ""))
	}
	if r.emailContains != nil {
		localVarQueryParams.Add("email__contains", parameterToString(*r.emailContains, ""))
	}
	if r.emailIcontains != nil {
		localVarQueryParams.Add("email__icontains", parameterToString(*r.emailIcontains, ""))
	}
	if r.emailIexact != nil {
		localVarQueryParams.Add("email__iexact", parameterToString(*r.emailIexact, ""))
	}
	if r.emailIn != nil {
		localVarQueryParams.Add("email__in", parameterToString(*r.emailIn, "csv"))
	}
	if r.firstName != nil {
		localVarQueryParams.Add("first_name", parameterToString(*r.firstName, ""))
	}
	if r.firstNameContains != nil {
		localVarQueryParams.Add("first_name__contains", parameterToString(*r.firstNameContains, ""))
	}
	if r.firstNameIcontains != nil {
		localVarQueryParams.Add("first_name__icontains", parameterToString(*r.firstNameIcontains, ""))
	}
	if r.firstNameIexact != nil {
		localVarQueryParams.Add("first_name__iexact", parameterToString(*r.firstNameIexact, ""))
	}
	if r.firstNameIn != nil {
		localVarQueryParams.Add("first_name__in", parameterToString(*r.firstNameIn, "csv"))
	}
	if r.isActive != nil {
		localVarQueryParams.Add("is_active", parameterToString(*r.isActive, ""))
	}
	if r.isStaff != nil {
		localVarQueryParams.Add("is_staff", parameterToString(*r.isStaff, ""))
	}
	if r.lastName != nil {
		localVarQueryParams.Add("last_name", parameterToString(*r.lastName, ""))
	}
	if r.lastNameContains != nil {
		localVarQueryParams.Add("last_name__contains", parameterToString(*r.lastNameContains, ""))
	}
	if r.lastNameIcontains != nil {
		localVarQueryParams.Add("last_name__icontains", parameterToString(*r.lastNameIcontains, ""))
	}
	if r.lastNameIexact != nil {
		localVarQueryParams.Add("last_name__iexact", parameterToString(*r.lastNameIexact, ""))
	}
	if r.lastNameIn != nil {
		localVarQueryParams.Add("last_name__in", parameterToString(*r.lastNameIn, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, "csv"))
	}
	if r.username != nil {
		localVarQueryParams.Add("username", parameterToString(*r.username, ""))
	}
	if r.usernameContains != nil {
		localVarQueryParams.Add("username__contains", parameterToString(*r.usernameContains, ""))
	}
	if r.usernameIcontains != nil {
		localVarQueryParams.Add("username__icontains", parameterToString(*r.usernameIcontains, ""))
	}
	if r.usernameIexact != nil {
		localVarQueryParams.Add("username__iexact", parameterToString(*r.usernameIexact, ""))
	}
	if r.usernameIn != nil {
		localVarQueryParams.Add("username__in", parameterToString(*r.usernameIn, "csv"))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *UsersApiService
	id int32
	patchedUser *PatchedUser
}

func (r ApiUsersPartialUpdateRequest) PatchedUser(patchedUser PatchedUser) ApiUsersPartialUpdateRequest {
	r.patchedUser = &patchedUser
	return r
}

func (r ApiUsersPartialUpdateRequest) Execute() (UserResponse, *_nethttp.Response, error) {
	return r.ApiService.UsersPartialUpdateExecute(r)
}

/*
 * UsersPartialUpdate Update an user
 * ViewSet for User.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A unique integer value identifying this user.
 * @return ApiUsersPartialUpdateRequest
 */
func (a *UsersApiService) UsersPartialUpdate(ctx _context.Context, id int32) ApiUsersPartialUpdateRequest {
	return ApiUsersPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return UserResponse
 */
func (a *UsersApiService) UsersPartialUpdateExecute(r ApiUsersPartialUpdateRequest) (UserResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.UsersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/users/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchedUser == nil {
		return localVarReturnValue, nil, reportError("patchedUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersReadRequest struct {
	ctx _context.Context
	ApiService *UsersApiService
	id int32
	fields *string
	excludeFields *string
}

func (r ApiUsersReadRequest) Fields(fields string) ApiUsersReadRequest {
	r.fields = &fields
	return r
}
func (r ApiUsersReadRequest) ExcludeFields(excludeFields string) ApiUsersReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiUsersReadRequest) Execute() (UserResponse, *_nethttp.Response, error) {
	return r.ApiService.UsersReadExecute(r)
}

/*
 * UsersRead Inspect an user
 * ViewSet for User.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A unique integer value identifying this user.
 * @return ApiUsersReadRequest
 */
func (a *UsersApiService) UsersRead(ctx _context.Context, id int32) ApiUsersReadRequest {
	return ApiUsersReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return UserResponse
 */
func (a *UsersApiService) UsersReadExecute(r ApiUsersReadRequest) (UserResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.UsersRead")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/users/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	if r.excludeFields != nil {
		localVarQueryParams.Add("exclude_fields", parameterToString(*r.excludeFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUpdateRequest struct {
	ctx _context.Context
	ApiService *UsersApiService
	id int32
	user *User
}

func (r ApiUsersUpdateRequest) User(user User) ApiUsersUpdateRequest {
	r.user = &user
	return r
}

func (r ApiUsersUpdateRequest) Execute() (UserResponse, *_nethttp.Response, error) {
	return r.ApiService.UsersUpdateExecute(r)
}

/*
 * UsersUpdate Update an user
 * ViewSet for User.

NOTE: This API endpoint is in "tech preview" and subject to change
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A unique integer value identifying this user.
 * @return ApiUsersUpdateRequest
 */
func (a *UsersApiService) UsersUpdate(ctx _context.Context, id int32) ApiUsersUpdateRequest {
	return ApiUsersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return UserResponse
 */
func (a *UsersApiService) UsersUpdateExecute(r ApiUsersUpdateRequest) (UserResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.UsersUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/users/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.user == nil {
		return localVarReturnValue, nil, reportError("user is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.user
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
