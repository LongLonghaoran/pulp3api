/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Copy A serializer for Content Copy API.
type Copy struct {
	// A JSON document describing sources, destinations, and content to be copied
	Config map[string]interface{} `json:"config"`
	// Also copy any distributions, components, and releases as needed for any packages being copied. This will allow for structured publications of the target repository.Default is set to True
	Structured *bool `json:"structured,omitempty"`
	// Also copy dependencies of any packages being copied. NOT YETIMPLEMENTED! You must keep this at \"False\"!
	DependencySolving *bool `json:"dependency_solving,omitempty"`
}

// NewCopy instantiates a new Copy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopy(config map[string]interface{}, ) *Copy {
	this := Copy{}
	this.Config = config
	var structured bool = true
	this.Structured = &structured
	var dependencySolving bool = false
	this.DependencySolving = &dependencySolving
	return &this
}

// NewCopyWithDefaults instantiates a new Copy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyWithDefaults() *Copy {
	this := Copy{}
	var structured bool = true
	this.Structured = &structured
	var dependencySolving bool = false
	this.DependencySolving = &dependencySolving
	return &this
}

// GetConfig returns the Config field value
func (o *Copy) GetConfig() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Copy) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Copy) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetStructured returns the Structured field value if set, zero value otherwise.
func (o *Copy) GetStructured() bool {
	if o == nil || o.Structured == nil {
		var ret bool
		return ret
	}
	return *o.Structured
}

// GetStructuredOk returns a tuple with the Structured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Copy) GetStructuredOk() (*bool, bool) {
	if o == nil || o.Structured == nil {
		return nil, false
	}
	return o.Structured, true
}

// HasStructured returns a boolean if a field has been set.
func (o *Copy) HasStructured() bool {
	if o != nil && o.Structured != nil {
		return true
	}

	return false
}

// SetStructured gets a reference to the given bool and assigns it to the Structured field.
func (o *Copy) SetStructured(v bool) {
	o.Structured = &v
}

// GetDependencySolving returns the DependencySolving field value if set, zero value otherwise.
func (o *Copy) GetDependencySolving() bool {
	if o == nil || o.DependencySolving == nil {
		var ret bool
		return ret
	}
	return *o.DependencySolving
}

// GetDependencySolvingOk returns a tuple with the DependencySolving field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Copy) GetDependencySolvingOk() (*bool, bool) {
	if o == nil || o.DependencySolving == nil {
		return nil, false
	}
	return o.DependencySolving, true
}

// HasDependencySolving returns a boolean if a field has been set.
func (o *Copy) HasDependencySolving() bool {
	if o != nil && o.DependencySolving != nil {
		return true
	}

	return false
}

// SetDependencySolving gets a reference to the given bool and assigns it to the DependencySolving field.
func (o *Copy) SetDependencySolving(v bool) {
	o.DependencySolving = &v
}

func (o Copy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["config"] = o.Config
	}
	if o.Structured != nil {
		toSerialize["structured"] = o.Structured
	}
	if o.DependencySolving != nil {
		toSerialize["dependency_solving"] = o.DependencySolving
	}
	return json.Marshal(toSerialize)
}

type NullableCopy struct {
	value *Copy
	isSet bool
}

func (v NullableCopy) Get() *Copy {
	return v.value
}

func (v *NullableCopy) Set(val *Copy) {
	v.value = val
	v.isSet = true
}

func (v NullableCopy) IsSet() bool {
	return v.isSet
}

func (v *NullableCopy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopy(val *Copy) *NullableCopy {
	return &NullableCopy{value: val, isSet: true}
}

func (v NullableCopy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


