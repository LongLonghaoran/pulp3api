/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DatabaseConnectionResponse Serializer for the database connection information
type DatabaseConnectionResponse struct {
	// Info about whether the app can connect to the database
	Connected bool `json:"connected"`
}

// NewDatabaseConnectionResponse instantiates a new DatabaseConnectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseConnectionResponse(connected bool, ) *DatabaseConnectionResponse {
	this := DatabaseConnectionResponse{}
	this.Connected = connected
	return &this
}

// NewDatabaseConnectionResponseWithDefaults instantiates a new DatabaseConnectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseConnectionResponseWithDefaults() *DatabaseConnectionResponse {
	this := DatabaseConnectionResponse{}
	return &this
}

// GetConnected returns the Connected field value
func (o *DatabaseConnectionResponse) GetConnected() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value
// and a boolean to check if the value has been set.
func (o *DatabaseConnectionResponse) GetConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Connected, true
}

// SetConnected sets field value
func (o *DatabaseConnectionResponse) SetConnected(v bool) {
	o.Connected = v
}

func (o DatabaseConnectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connected"] = o.Connected
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseConnectionResponse struct {
	value *DatabaseConnectionResponse
	isSet bool
}

func (v NullableDatabaseConnectionResponse) Get() *DatabaseConnectionResponse {
	return v.value
}

func (v *NullableDatabaseConnectionResponse) Set(val *DatabaseConnectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseConnectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseConnectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseConnectionResponse(val *DatabaseConnectionResponse) *NullableDatabaseConnectionResponse {
	return &NullableDatabaseConnectionResponse{value: val, isSet: true}
}

func (v NullableDatabaseConnectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseConnectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


