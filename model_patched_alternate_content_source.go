/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PatchedAlternateContentSource Serializer for the AlternateContentSource.
type PatchedAlternateContentSource struct {
	// Name of Alternate Content Source.
	Name *string `json:"name,omitempty"`
	// Date of last refresh of AlternateContentSource.
	LastRefreshed NullableTime `json:"last_refreshed,omitempty"`
	// List of paths that will be appended to the Remote url when searching for content.
	Paths *[]string `json:"paths,omitempty"`
	// The remote to provide alternate content source.
	Remote *string `json:"remote,omitempty"`
}

// NewPatchedAlternateContentSource instantiates a new PatchedAlternateContentSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedAlternateContentSource() *PatchedAlternateContentSource {
	this := PatchedAlternateContentSource{}
	return &this
}

// NewPatchedAlternateContentSourceWithDefaults instantiates a new PatchedAlternateContentSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedAlternateContentSourceWithDefaults() *PatchedAlternateContentSource {
	this := PatchedAlternateContentSource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedAlternateContentSource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAlternateContentSource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedAlternateContentSource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedAlternateContentSource) SetName(v string) {
	o.Name = &v
}

// GetLastRefreshed returns the LastRefreshed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAlternateContentSource) GetLastRefreshed() time.Time {
	if o == nil || o.LastRefreshed.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastRefreshed.Get()
}

// GetLastRefreshedOk returns a tuple with the LastRefreshed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAlternateContentSource) GetLastRefreshedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRefreshed.Get(), o.LastRefreshed.IsSet()
}

// HasLastRefreshed returns a boolean if a field has been set.
func (o *PatchedAlternateContentSource) HasLastRefreshed() bool {
	if o != nil && o.LastRefreshed.IsSet() {
		return true
	}

	return false
}

// SetLastRefreshed gets a reference to the given NullableTime and assigns it to the LastRefreshed field.
func (o *PatchedAlternateContentSource) SetLastRefreshed(v time.Time) {
	o.LastRefreshed.Set(&v)
}
// SetLastRefreshedNil sets the value for LastRefreshed to be an explicit nil
func (o *PatchedAlternateContentSource) SetLastRefreshedNil() {
	o.LastRefreshed.Set(nil)
}

// UnsetLastRefreshed ensures that no value is present for LastRefreshed, not even an explicit nil
func (o *PatchedAlternateContentSource) UnsetLastRefreshed() {
	o.LastRefreshed.Unset()
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *PatchedAlternateContentSource) GetPaths() []string {
	if o == nil || o.Paths == nil {
		var ret []string
		return ret
	}
	return *o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAlternateContentSource) GetPathsOk() (*[]string, bool) {
	if o == nil || o.Paths == nil {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *PatchedAlternateContentSource) HasPaths() bool {
	if o != nil && o.Paths != nil {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *PatchedAlternateContentSource) SetPaths(v []string) {
	o.Paths = &v
}

// GetRemote returns the Remote field value if set, zero value otherwise.
func (o *PatchedAlternateContentSource) GetRemote() string {
	if o == nil || o.Remote == nil {
		var ret string
		return ret
	}
	return *o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAlternateContentSource) GetRemoteOk() (*string, bool) {
	if o == nil || o.Remote == nil {
		return nil, false
	}
	return o.Remote, true
}

// HasRemote returns a boolean if a field has been set.
func (o *PatchedAlternateContentSource) HasRemote() bool {
	if o != nil && o.Remote != nil {
		return true
	}

	return false
}

// SetRemote gets a reference to the given string and assigns it to the Remote field.
func (o *PatchedAlternateContentSource) SetRemote(v string) {
	o.Remote = &v
}

func (o PatchedAlternateContentSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LastRefreshed.IsSet() {
		toSerialize["last_refreshed"] = o.LastRefreshed.Get()
	}
	if o.Paths != nil {
		toSerialize["paths"] = o.Paths
	}
	if o.Remote != nil {
		toSerialize["remote"] = o.Remote
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedAlternateContentSource struct {
	value *PatchedAlternateContentSource
	isSet bool
}

func (v NullablePatchedAlternateContentSource) Get() *PatchedAlternateContentSource {
	return v.value
}

func (v *NullablePatchedAlternateContentSource) Set(val *PatchedAlternateContentSource) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedAlternateContentSource) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedAlternateContentSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedAlternateContentSource(val *PatchedAlternateContentSource) *NullablePatchedAlternateContentSource {
	return &NullablePatchedAlternateContentSource{value: val, isSet: true}
}

func (v NullablePatchedAlternateContentSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedAlternateContentSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


