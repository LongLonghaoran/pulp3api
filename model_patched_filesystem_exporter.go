/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PatchedFilesystemExporter Serializer for FilesystemExporters.
type PatchedFilesystemExporter struct {
	// Unique name of the file system exporter.
	Name *string `json:"name,omitempty"`
	// File system location to export to.
	Path *string `json:"path,omitempty"`
	// Method of exporting
	Method NullableMethodEnum `json:"method,omitempty"`
}

// NewPatchedFilesystemExporter instantiates a new PatchedFilesystemExporter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedFilesystemExporter() *PatchedFilesystemExporter {
	this := PatchedFilesystemExporter{}
	return &this
}

// NewPatchedFilesystemExporterWithDefaults instantiates a new PatchedFilesystemExporter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedFilesystemExporterWithDefaults() *PatchedFilesystemExporter {
	this := PatchedFilesystemExporter{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedFilesystemExporter) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedFilesystemExporter) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedFilesystemExporter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedFilesystemExporter) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PatchedFilesystemExporter) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedFilesystemExporter) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PatchedFilesystemExporter) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PatchedFilesystemExporter) SetPath(v string) {
	o.Path = &v
}

// GetMethod returns the Method field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedFilesystemExporter) GetMethod() MethodEnum {
	if o == nil || o.Method.Get() == nil {
		var ret MethodEnum
		return ret
	}
	return *o.Method.Get()
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedFilesystemExporter) GetMethodOk() (*MethodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Method.Get(), o.Method.IsSet()
}

// HasMethod returns a boolean if a field has been set.
func (o *PatchedFilesystemExporter) HasMethod() bool {
	if o != nil && o.Method.IsSet() {
		return true
	}

	return false
}

// SetMethod gets a reference to the given NullableMethodEnum and assigns it to the Method field.
func (o *PatchedFilesystemExporter) SetMethod(v MethodEnum) {
	o.Method.Set(&v)
}
// SetMethodNil sets the value for Method to be an explicit nil
func (o *PatchedFilesystemExporter) SetMethodNil() {
	o.Method.Set(nil)
}

// UnsetMethod ensures that no value is present for Method, not even an explicit nil
func (o *PatchedFilesystemExporter) UnsetMethod() {
	o.Method.Unset()
}

func (o PatchedFilesystemExporter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Method.IsSet() {
		toSerialize["method"] = o.Method.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedFilesystemExporter struct {
	value *PatchedFilesystemExporter
	isSet bool
}

func (v NullablePatchedFilesystemExporter) Get() *PatchedFilesystemExporter {
	return v.value
}

func (v *NullablePatchedFilesystemExporter) Set(val *PatchedFilesystemExporter) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedFilesystemExporter) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedFilesystemExporter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedFilesystemExporter(val *PatchedFilesystemExporter) *NullablePatchedFilesystemExporter {
	return &NullablePatchedFilesystemExporter{value: val, isSet: true}
}

func (v NullablePatchedFilesystemExporter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedFilesystemExporter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


