/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Policy762Enum the model 'Policy762Enum'
type Policy762Enum string

// List of Policy762Enum
const (
	IMMEDIATE Policy762Enum = "immediate"
	ON_DEMAND Policy762Enum = "on_demand"
	STREAMED Policy762Enum = "streamed"
)

func (v *Policy762Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Policy762Enum(value)
	for _, existing := range []Policy762Enum{ "immediate", "on_demand", "streamed",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Policy762Enum", value)
}

// Ptr returns reference to Policy762Enum value
func (v Policy762Enum) Ptr() *Policy762Enum {
	return &v
}

type NullablePolicy762Enum struct {
	value *Policy762Enum
	isSet bool
}

func (v NullablePolicy762Enum) Get() *Policy762Enum {
	return v.value
}

func (v *NullablePolicy762Enum) Set(val *Policy762Enum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy762Enum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy762Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy762Enum(val *Policy762Enum) *NullablePolicy762Enum {
	return &NullablePolicy762Enum{value: val, isSet: true}
}

func (v NullablePolicy762Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy762Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

