/*
 * Pulp 3 API
 *
 * Fetch, Upload, Organize, and Distribute Software Packages
 *
 * API version: v3
 * Contact: pulp-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatesEnum the model 'StatesEnum'
type StatesEnum string

// List of StatesEnum
const (
	SKIPPED StatesEnum = "skipped"
	COMPLETED StatesEnum = "completed"
	FAILED StatesEnum = "failed"
	CANCELED StatesEnum = "canceled"
)

func (v *StatesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatesEnum(value)
	for _, existing := range []StatesEnum{ "skipped", "completed", "failed", "canceled",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatesEnum", value)
}

// Ptr returns reference to StatesEnum value
func (v StatesEnum) Ptr() *StatesEnum {
	return &v
}

type NullableStatesEnum struct {
	value *StatesEnum
	isSet bool
}

func (v NullableStatesEnum) Get() *StatesEnum {
	return v.value
}

func (v *NullableStatesEnum) Set(val *StatesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatesEnum(val *StatesEnum) *NullableStatesEnum {
	return &NullableStatesEnum{value: val, isSet: true}
}

func (v NullableStatesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

